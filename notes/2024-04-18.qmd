---
title: "2024-04-18"
author: "Witek ten Hove"
format:
  html:
    include-in-header:
      - scripts.html
bibliography: bibliography.bib
---

## OBP:

# Complexity

With N patients and T timeslots the total number of possible schedules equals $\dbinom{N+T-1}{N}$. Ignoring constants we have:

$$\dbinom{N+T}{N}$$ $$= \frac{(N+T)!}{N!T!}$$ $$= \frac{1}{T!} \frac{(N+T)!}{N!} = $$ $$=\frac{1}{T!}((N+T)(N+T-1) .... (N+1))$$ $$= \frac{1}{T!}(N+T)^T(1(1-\frac{1}{N+T})(1-\frac{2}{N+T}) .... (1-\frac{T}{N+T}))$$

As $N + T$ increases the fractions with $N + T$ in the denominator will approach zero. Both $T!$ and $(N+T)^T$ are products with an equivalent count of factors. Nevertheless, when $N+T$ is significantly larger than $T$, the magnitude of the problem will expand with $\mathcal{O}((N+T)^T)$.

@kaandorp2007optimal proposed a local search algorithm to efficiently find an optimum. The search neighbourhood consists of all single-interval shifts starting from an initial schedule $x$. For each shifted schedule the loss is calculated. In case a shifted schedule resulted in a lower loss a new search neighbourhood was generated around this new optimal schedule. If a full neighbourhood was searched and no new optimum was found the current optimal schedule must be the global optimum.

If you're (extremely) lucky the first chosen schedule is the optimal schedule and it will only take one neighbourhood test to confirm it. The number of neighbours in one search neighbourhood equals $2^T-2$.

If you're (equally extremely) unlucky the optimum will be found after testing the last shifted schedule in the last neighbourhood. In that case you will have essentially tested the full solution set with size $\dbinom{N+T-1}{N}$.

An improved search method would converge faster to the global optimum by:

- Using a smarter way to define a starter schedule, or
- Decrease the size of search neighbourhoods, or
- Limit the number of search neighbourhoods

## Response Surface Methodology

One alternative search method might be the Response Surface Methodology (RSM). Compared to simple local search RSM could improve efficiency by limiting the number of search neighborhoods.

```{=html}
<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?si=qNvDsvguwVykFs_r&amp;list=PLhnjkyiJB1LNFEV_mR1pMi4zHtIMnnoGr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
```

RSM is a statistical technique used for optimizing processes by identifying optimal conditions. Unlike methods that focus on exploring local optima within nearby regions, RSM seeks to find the direction of the steepest descent and follows this trajectory incrementally. After each step along this path, an evaluation is performed to determine if the change has resulted in an improvement. If no improvement is observed, it suggests that the underlying linear assumption may no longer be valid, prompting a shift to a different search strategy. This iterative process continues until optimal conditions are identified, making RSM effective for navigating complex variable interactions within a design space.

```{r}
library(rsm)
```

### R Code for Lesson 3: Analyzing a 22 Design with Central Points

```{r}
DoEOpt04 <- data.frame(x1 = c(-1,-1,1,1,0,0,0,0,0),
                          x2 = c(-1,1,-1,1,0,0,0,0,0),
                          Time = c(30,30,40,40,35,35,35,35,35),
                          Temp = c(150,160,150,160,155,155,155,155,155),
                          Y = c(39.3,40,40.9,41.5,40.3,40.5,40.7,40.2,40.6)
                            )

# file view

str(DoEOpt04)

# setting the relationship between coded and natural variables

DoEOpt04 <- as.coded.data(DoEOpt04, 
              x1 ~ (Time-35)/5,
              x2 ~ (Temp-155)/5)

# regression model with coded variables

model <- rsm(Y ~ FO(x1,x2) + TWI(x1,x2), data = DoEOpt04)
summary(model)

# contour plot

contour(model, ~ x1+x2, 
        image = TRUE, 
        xlabs=c("Time (min)", "Temperature (ºC)"))
points(DoEOpt04$Time,DoEOpt04$Temp)
```

### R Code for Lesson 5: Designs with Central Points – Interpreting a Lousy Fitting

```{r}
# building the data set 
# (run this code to build the DoEOpt05 data set before following the analysis)

DoEOpt05 <- data.frame(x1 = c(-1,-1,1,1,0,0,0,0,0),
                          x2 = c(-1,1,-1,1,0,0,0,0,0),
                          Time = c(80,80,90,90,85,85,85,85,85),
                          Temp = c(170,180,170,180,175,175,175,175,175),
                          Y = c(76.5,77,78,79.5,79.9,80.3,80,79.7,79.8)
                            )

# loading Response Surface Methodology package

library(rsm)

# file view

str(DoEOpt05)

DoEOpt05 <- as.coded.data(DoEOpt05, 
              x1 ~ (Time-85)/5,
              x2 ~ (Temp-175)/5)

# regression model with coded variables

model <- rsm(Y ~ FO(x1,x2) + TWI(x1,x2), data = DoEOpt05)
summary(model)

# plots

plot(DoEOpt05$Time, DoEOpt05$Y, xlab = "Time", ylab = "Yield (%)")
plot(DoEOpt05$Temp, DoEOpt05$Y, xlab = "Temperature", ylab = "Yield (%)")

contour(model, ~ x1+x2, 
        image = TRUE, 
        xlabs=c("Time (min)", "Temperature (ºC)"))
points(DoEOpt05$Time,DoEOpt05$Temp)
```

### R Code for Lesson 7: Analyzing a Central Composite Design – R tutorial

```{r}
# building the data set 
# (run this code to build the DoEOpt05 data set before following the analysis)

DoEOpt06 <- data.frame(x1 = c(-1, -1, 1, 1, 0, 0, 0, 0, 0, 1.414, -1.414, 0, 0),
                          x2 = c(-1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 1.414, -1.414),
                          Time = c(80, 80, 90, 90, 85, 85, 85, 85, 85, 92.07, 77.93, 85, 85),
                          Temp = c(170, 180, 170, 180, 175, 175, 175, 175, 175, 175, 175, 182.07, 167.93),
                          Y = c(76.5, 77, 78, 79.5, 79.9, 80.3, 80, 79.7, 79.8, 78.4, 75.6, 78.5, 77)
                            )

# loading Response Surface Methodology package

library(rsm)

# checking file structure

str(DoEOpt06)

# setting the realtionship between the coded and the natural variables

DoEOpt06 <- as.coded.data(DoEOpt06, 
              x1 ~ (Time-85)/5,
              x2 ~ (Temp-175)/5)

###
##
# regression model for the Yield

model_Y <- rsm(Y ~ SO(x1,x2), data = DoEOpt06)

model_Y <- rsm(Y ~ FO(x1,x2) + TWI(x1,x2) + PQ(x1,x2), data = DoEOpt06)
summary(model_Y)

# contour and perspective plots

contour(model_Y, x1~x2, image = TRUE, 
        xlabs=c("Time (min)", "Temperature (ºC)"))

persp(model_Y, x1~x2, col = terrain.colors(50), contours = "colors",
      zlab = "Yield (%)", 
      xlabs=c("Time (min)", "Temperature (ºC)"))

# predictig the Yield at the stationary point

max <- data.frame(x1 = 0.361, x2 = 0.257)
predict(model_Y, max)
```



        			

        		

        	
