---
title: "2024-06-06"
author: "Witek ten Hove"
format:
  html:
    css: styles.css
    include-in-header:
      - scripts.html
bibliography: bibliography.bib
jupyter: python3
editor: 
  markdown: 
    wrap: sentence
---

## OBP:

Afspraken:

-   [ ] We gaan verder kijken naar Simulation Optimization methodes

-   [ ] Wellicht icm Gradient Boosting, mogelijk ML-toepassingen

-   [ ] Onderzoeken wat de stand van zaken is mbt SO en Appointment Scheduling

-   [ ] Start met artikel van @homem2022simulation

-   [ ] Waarom zou het probleem dat besproken wordt in @homem2022simulation non-convex zijn?

-   [x] Aanmaken van Overleaf document voor samenwerking.

-   [ ] Literatuurnotities maken

-   [x] Literatuuroverzicht maken

-   [ ] Problem description uitwerken in Overleaf.

```{python}
import pandas as pd
import json
from itables import init_notebook_mode, show
init_notebook_mode(all_interactive=False)
```

```{python}
#| column: screen-inset-shaded

# Read the JSON data from the file
with open('methods.json', 'r') as file:
    data = json.load(file)

# Sort the data by the "Year" field
sorted_data = sorted(data, key=lambda x: x["Year"])

# Extracting the data for the table
headers = ["BibTex ID", "Time Slots", "Schedule Format", "Overbooking Allowed", "Service Time", "No-Shows Assumed", "Emergency Patients Assumed", "Punctuality Assumed", "Waiting Time", "Idle Time", "Overtime", "Solution Approach"]
rows = []

for article in sorted_data:
    row = [
        article["BibTex ID"],
        article["Modeling Approach"]["time slot length"],
        article["Modeling Approach"]["schedule format"],
        article["Modeling Approach"]["overbooking allowed"],
        article["Modeling Approach"]["service time"],
        article["Modeling Approach"]["no-shows assumed"],
        article["Modeling Approach"]["emergency patients assumed"],
        article["Modeling Approach"]["punctuality assumed"],
        article["Modeling Approach"]["objective function elements"]["waiting time"],
        article["Modeling Approach"]["objective function elements"]["idle time"],
        article["Modeling Approach"]["objective function elements"]["overtime"],
        article["Solution approach summary"]
    ]
    rows.append(row)

# Create a DataFrame
df = pd.DataFrame(rows, columns=headers)

# Use Styler to format the DataFrame
styled_table = df.style.set_properties(**{'text-align': 'left', 'white-space': 'pre-wrap'}) \
                 .set_table_styles([dict(selector='th', props=[('text-align', 'left'), ('vertical-align', 'top')])])  
show(styled_table,
     paging=False,
     classes='display compact cell-border',
     buttons=['copyHtml5', 'csvHtml5', 'excelHtml5'],
     layout={'top1': 'searchPanes'},
     searchPanes={"cascadePanes": True, 'initCollapsed': True},)
```

## Solution landscape

```{python}
import math

def binomial_coefficient(N, T):
    return math.comb(N + T - 1, N)

# Example usage
N = 7
T = 5
result = binomial_coefficient(N, T)
print(result)
```

The problem can be illustrated as a landscape that contains all possible solutions (points) and the task is to find a path that leads to the solution (point) that has the lowest value.
Each point can be defined by an array of T coordinates with values between 0 and N, such that the sum of all coordinates equals N.

```{python}
import numpy as np
import plotly.graph_objects as go

def create_square_matrix(i):
    if i < 1:
        raise ValueError("The input must be an integer greater than 1.")
    
    # Find n and m such that n * m = i and |n - m| is minimized
    n = int(np.sqrt(i))
    while i % n != 0:
        n -= 1
    m = i // n
    
    # Generate the n x m matrix with random values
    matrix = np.random.rand(n, m)
    
    return matrix

def find_positions(matrix, values):
    positions = []
    for value in values:
        result = np.where(matrix == value)
        positions.append((result[0][0], result[1][0]))
    return positions

def plot_matrix_with_arrows(matrix, l):
    n, m = matrix.shape
    x, y, colors = [], [], []

    for i in range(n):
        for j in range(m):
            x.append(j)
            y.append(n - i - 1)  # Invert y-axis to have the origin at the top-left corner
            colors.append(matrix[i, j])
    
    # Find the four lowest values and their positions
    sorted_values = np.sort(matrix, axis=None)
    lowest_values = sorted_values[:l]
    
    positions = find_positions(matrix, lowest_values)
    
    fig = go.Figure(data=go.Scatter(
        x=x,
        y=y,
        mode='markers',
        marker=dict(
            size=20,
            color=colors,
            colorscale='Viridis',
            colorbar=dict(title='Value')
        )
    ))
    
    fig.update_layout(
        title=f'Landscape with all {n * m} possible solutions',
        xaxis=dict(
            tickmode='linear',
            dtick=1,
            range=[-0.5, m - 0.5]
        ),
        yaxis=dict(
            tickmode='linear',
            dtick=1,
            range=[-0.5, n - 0.5],
            autorange='reversed'
        ),
        xaxis_title='Column',
        yaxis_title='Row',
        width=800,
        height=800
    )

    # Add arrows from the fourth lowest to the lowest value
    for i in range(l-1):
        (start_i, start_j) = positions[i]
        (end_i, end_j) = positions[i + 1]
        fig.add_annotation(
            x=end_j,
            y=n - end_i - 1,
            ax=start_j,
            ay=n - start_i - 1,
            xref="x",
            yref="y",
            axref="x",
            ayref="y",
            showarrow=True,
            arrowhead=2,
            arrowsize=3,
            arrowwidth=2,
            arrowcolor="red"
        )
    
    fig.show()

# Example usage
N = 7
T = 5
result = binomial_coefficient(N, T)
i = result
matrix = create_square_matrix(i)
print(matrix.shape)  # Output the shape to verify it is as square as possible

# Plot the matrix with arrows
plot_matrix_with_arrows(matrix, 6)
```

What we know is:

1.  A scheduling problem with fixed and equal time slots defined as:

$$
\min \left\{ \alpha_W W(x) + \alpha_I I(x) + \alpha_L L(x) \ \middle| \ 
\begin{array}{c}
\sum_t x_t = N \\
x_t \in \mathbb{N}_0
\end{array}
\right\}
$$

        
has a multimodular objective [@kaandorp2007optimal]


<!-- -->

2.  In the case where appointment times are continuous and variable the optimal schedule is dome-shaped, meaning the time allotted for each appointment initially increases sharply, then climbs slowly to a peak, and decreases slowly after the peak. This allows for some buffer time to absorb increasing service time variability as the day progresses due to accumulated delays, while keeping slots tight at the start and end [@klassen_improving_2009].

<ol class="custom-counter">

<li>This means that any local optimum is also the global optimum .</li>

<li>

Would that mean that schedules with overbooking at the start and towards the finish and more zeroes in the middle show optimal performance?`<`{=html}
`/li>`{=html}

<li>

</li>

<!-- Add more list items as needed -->

</ol>
