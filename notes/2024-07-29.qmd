---
title: "2024-07-18"
author: "Witek ten Hove"
format: html
editor: visual
jupyter: python3
---

Besproken met Joost:

-   Model bouwen voor pairwise ranking.
-   Performance vergelijken met cardinal ML model
-   Computation time vergelijken:
    -   Lindley recursion \<\> cardinal ML
    -   Cardinal ML model pairwise ranking vs direct pairwise ranking
-   Cardinal ML model met large objective punisment in loss function ontwikkelen

## Setup and load data

```{python}
from functions import generate_all_schedules
from schedule_class import NewSchedule, generate_schedules, service_time_with_no_shows
import pickle
import random
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV
from sklearn.metrics import mean_squared_error, make_scorer, accuracy_score
from sklearn.base import clone
from sklearn.model_selection import StratifiedKFold, train_test_split, GridSearchCV
from itertools import chain, combinations
```

```{python}
class ScheduleData:
  def __init__(self, N: int, T: int, samples, labels):
    self.N = N
    self.T = T
    self.samples = samples
    self.labels = labels
  
  def describe_data(self):
    print(f'N = {self.N}', f'T = {self.T}', '\nSamples',self.samples.tail(10), '\nLabels', self.labels.tail(10), sep = "\n")
  
  def create_pair_list(self, n): # Create a set of randomly selected pairs of schedules
    S = list(range(len(self.samples)))
    Q = random.choices(S, k=n)
    P = []
    
    for q in Q:
        # Create a list of possible choices excluding t
        possible_choices = [s for s in S if s != q]
        
        # Choose a random element from the possible choices
        p = random.choice(possible_choices)
        
        # Add the chosen element to the result list
        P.append(p)
    
    samples_s1 = self.samples.iloc[Q, :].values.tolist()
    samples_s2 = self.samples.iloc[P, :].values.tolist()
    self.pair_list = list(zip(samples_s1, samples_s2))
    self.lables_s1 = self.labels.loc[Q, 'obj'].values.tolist()
    self.lables_s2 = self.labels.loc[P, 'obj'].values.tolist()
    self.lables_rank = [1 * (self.lables_s1[i] > self.lables_s2[i]) for i in range(len(self.lables_s1))]
    print(self.pair_list[:15], "\n", self.lables_s1[:15], "\n", self.lables_s2[:15], "\n", self.lables_rank[:15])
    
  def create_neighbors_list(self, n): # Create a set of pairs of schedules that are from the same neighborhood
    # Build a subset of random schedules with length n
    S = list(range(len(self.samples)))
    Q = random.choices(S, k=n)
    samples_sub = self.samples.iloc[Q, :].values.tolist()
    labels_sub = self.labels.iloc[Q, 7]
    self.neighbors_list = []
    
    # For each schedule in in the subset choose 2 random intervals i, j and swap 1 patient
    for s in samples_sub:
      i = random.choice(range(len(s)))  # Ensure i is a valid index in s
      j = [index for index, element in enumerate(s) if element > 0 and index != i]
      
      if not j:  # Ensure j is not empty
          continue
      
      j = random.choice(j)  # Choose a random valid index from j
      
      s_pair = s.copy()  # Create a copy of s to modify
      s_pair[i] = s[i] + 1
      s_pair[j] = s[j] - 1
      
      self.neighbors_list.append((s, s_pair))
    print(samples_sub, "\n", self.neighbors_list, "\n", labels_sub)
  
  def calculate_objective(self, schedule, s, d, q):
    s = service_time_with_no_shows(s, q) # Adjust service times distribution for no-shows
    sp = np.array([1], dtype=np.int64) # Set probability of first spillover time being zero to 1
    wt_list = [] # Initialize wt_list for saving all waiting times for all patients in the schedule
    ewt = 0 # Initialize sum of expected waiting times
    for x in schedule: # For each interval -
      if(x == 0): # In case there are no patients,
        wt_temp = [np.array(sp)] # the spillover from the previous interval is recorded,
        wt_list.append([]) # but there are no waiting times.
        sp = [] # Initialize the spillover time distribution 
        sp.append(np.sum(wt_temp[-1][:d+1])) # All the work from the previous interval's spillover that could not be processed will be added to the this interval's spillover.
        sp[1:] = wt_temp[-1][d+1:]
      else: # In case there are patients scheduled,
        wt_temp = [np.array(sp)] # Initialize wt_temp for saving all waiting times for all patients in the interval. The first patient has to wait for the spillover work from the previous period.
        ewt += np.dot(range(len(sp)), sp) # Add waiting time for first patient in interval
        for i in range(x-1): # For each patient
          wt = np.convolve(wt_temp[i], s) # Calculate the waiting time distribution
          wt_temp.append(wt)
          ewt += np.dot(range(len(wt)), wt)
        wt_list.append(wt_temp)
        sp = []
        sp.append(np.sum(np.convolve(wt_temp[-1],s)[:d+1])) # Calculate the spillover
        sp[1:] = np.convolve(wt_temp[-1],s)[d+1:]
    print(f"Schedule: {schedule}, ewt = {ewt}")


with open('./experiments/data.pickle', 'rb') as file:
  sch_data: ScheduleData = pickle.load(file)
  
sch_data.description
sch_data.describe_data()
sch_data.create_pair_list(16000)
sch_data.create_neighbors_list(10)
test_sch = sch_data.neighbors_list[1][0]
sch_data.calculate_objective(test_sch, [0.0, 0.27, 0.28, 0.2, 0.15, 0.1], 3, 0.2)
```

### Flow chart of objective calculation method

```{mermaid}
flowchart TD
    A[Start] --> B[Adjust service times distribution for no-shows]
    B --> C[Set probability of first spillover time being zero to 1]
    C --> D[Initialize wt_list and ewt </br> for saving waiting times distributions and </br>accumulated expected waiting time]
    D --> E[Loop through each interval in schedule]
    
    E --> F{Is x == 0?}
    
    F -->|Yes| G[Record spillover from previous interval]
    G --> H[Append empty list to wt_list]
    H --> I[Initialize spillover time distribution]
    I --> J[Calculate spillover for next interval]
    J --> K[Continue to next interval]

    F -->|No| L[Initialize wt_temp for current interval]
    L --> M[Add spillover from previous interval </br>as waiting time for first patient in current interval]
    M --> N[Loop through each patient in interval]
    
    N --> O[Calculate waiting time distribution for current patient]
    O --> P[Append waiting time distribution to wt_temp]
    P --> Q[Add expected waiting time for current patient to ewt]
    Q --> R[Append wt_temp to wt_list]
    
    R --> S[Initialize spillover time distribution]
    S --> T[Calculate spillover for next interval]
    T --> K[Continue to next interval]
    
    K --> U[Print wt_list]
    U --> V[Print schedule and ewt]
    V --> W[End]

```

### Flow chart data preparation

```{mermaid}
graph TD
    A["Create features"] -->|"option 1"| B["from population"]
    A["Create features"] -->|"option 2"| C["random subset"]
    B --> D["Create pairs"]
    C --> D["Create pairs"]
    D["Create pairs"] -->|"option 1"| E["random"]
    D["Create pairs"] -->|"option 2"| F["neighbors"]
    E --> G["Create labels"]
    F --> G["Create labels"]
    G["Create labels"] -->|"option 1"| H["objective"]
    G["Create labels"] -->|"option 2"| I["ranking"]
    H --> J["Split dataset"]
    I --> J["Split dataset"]
```

```{python}
import math

# Parameters
N = 12
T = 18

# Calculate number of possible schedules
num_schedules = math.comb(N + T - 1, N)
print(f"Number of possible schedules: {num_schedules}")

# Memory per schedule (in bytes)
memory_per_schedule = 4 * T  # 4 bytes per integer, T integers per schedule
print(f"Memory per schedule: {memory_per_schedule} bytes")

# Total memory required (in bytes)
total_memory_bytes = num_schedules * memory_per_schedule
total_memory_gb = total_memory_bytes / (1024 ** 3)  # Convert bytes to gigabytes

print(f"Total memory required: {total_memory_bytes} bytes")
print(f"Total memory required: {total_memory_gb:.2f} GB")
```

```{python}
N = 8
T = 12
population = generate_all_schedules(N, T)
```

```{python}
import time
import math
from itertools import combinations_with_replacement
N = 7
T = 5
def generate_all_schedules(N, T):
    from itertools import combinations_with_replacement
    
    pop_size = math.comb(N+T-1, N)
    print(f"Number of possible schedules: {pop_size}")
    
    # Generate the combinations
    schedules = list(combinations_with_replacement(range(T), N))
    end_time = time.time()
    
    # Convert combinations into the desired format
    result = []
    timing = 0
    counter = 0
    for comb in schedules:
        counter += 1
        # Start timing
        start_time = time.time()
        schedule = [0] * T
        for slot in comb:
            schedule[slot] += 1
            # End timing
        result.append(schedule)
        end_time = time.time()
        timing += end_time - start_time
        average_timing = timing / counter
        remaining = (pop_size - counter) * average_timing
        print(f"Created {counter} schedules in {timing} secs.\nRemaining {pop_size - counter} schedules in est. {remaining} secs.")
    
    return result
# Example usage
schedules = generate_all_schedules(N, T)
```
```{python}
import time
import numpy as np
from itertools import combinations_with_replacement

def generate_all_schedules(N, T):
    from itertools import combinations_with_replacement
    
    # Start timing
    start_time = time.time()
    
    # Generate the combinations
    schedules = list(combinations_with_replacement(range(T), N))
    
    # Convert combinations into the desired format using np.bincount
    result = []
    for comb in schedules:
        schedule = np.bincount(comb, minlength=T)
        result.append(schedule.tolist())
    
    # End timing
    end_time = time.time()
    
    print(f"Number of possible schedules: {len(result)}")
    print(f"Time taken: {end_time - start_time} seconds")
    return result

# Example usage
N = 12
T = 18
schedules = generate_all_schedules(N, T)
print(schedules[:15])
```

```{python}
import numpy as np
import time
import pickle
from itertools import combinations_with_replacement
import os

def serialize_schedules(N, T):
    from itertools import combinations_with_replacement
    file_path=f"experiments/n{N}t{T}.pickle"
    
    # Start timing
    start_time = time.time()
    
    # Open a file for writing serialized schedules
    with open(file_path, 'wb') as f:
        for comb in combinations_with_replacement(range(T), N):
            schedule = np.bincount(comb, minlength=T).tolist()
            pickle.dump(schedule, f)
    
    # End timing
    end_time = time.time()
    
    print(f"Number of possible schedules: {math.comb(N+T-1, N)}")
    print(f"Time taken: {end_time - start_time} seconds")
    print(f"Schedules are serialized and saved to {file_path}")

def load_schedules(file_path):
    # Start timing
    start_time = time.time()
    
    schedules = []
    with open(file_path, 'rb') as f:
        while True:
            try:
                schedules.append(pickle.load(f))
            except EOFError:
                break
        # End timing
    end_time = time.time()
    print(f"Loading time: {end_time - start_time} seconds")
    return schedules

# Example usage
N = 12
T = 18
serialize_schedules(N, T)
file_path=f"experiments/n{N}t{T}.pickle"
schedules = load_schedules(file_path)
print(len(schedules))
```


```{python}
def generate_random_schedule(N, T):
  import random
  slots = random.choices(range(T), k = N)
  schedule = [0]*T
  schedule = np.bincount(slots, minlength=T).tolist()
  return(schedule)
generate_random_schedule(N, T)
```
