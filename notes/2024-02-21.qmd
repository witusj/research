---
title: "2024-02-21"
author: "Witek ten Hove"
format:
  html:
    include-in-header:
      - scripts.html
bibliography: bibliography.bib
editor: 
  markdown: 
    wrap: 72
---

## OBP:

### Blog Post Title: Understanding Scheduling Theory, Algorithms, and Systems

This comprehensive guide introduces you to the fundamentals of scheduling theory, algorithms, and systems, emphasizing dynamic programming, integer programming, and complex hierarchies within scheduling problems.

#### Dynamic Programming and Integer Programming

Dynamic programming (DP) is a powerful algorithm design technique that solves optimization problems through recursive decomposition and memorization of intermediate calculations. Integer programming involves finding optimal solutions for discrete variables, making it particularly useful for scheduling problems with integral constraints.

#### Complexity Hierarchy

Understanding the complexity of scheduling problems helps identify efficient algorithms for specific scenarios. Common scheduling problems lie within the realm of NP-hardness, requiring advanced methods like approximation algorithms, metaheuristics, and exact exponential-time algorithms.

#### Stochastic Scheduling Problems

In real-world situations, uncertainty exists due to factors like machine failures, random arrival patterns, and varying processing speeds. Stochastic scheduling addresses these challenges by incorporating probabilistic models and statistical analysis.

#### Python Implementation

To illustrate key concepts, this post includes Python code snippets demonstrating various scheduling algorithms and techniques, such as dynamic programming and integer programming.

For instance, let's examine a simple weighted interval scheduling problem using dynamic programming:

```python
def weighted_interval_scheduling(requests):
    # Sort requests by decreasing weight
    sorted_requests = sorted(requests, reverse=True, key=lambda r: r['weight'])
    
    # Initialize dp array
    dp = [0] * len(sorted_requests)
    dp[-1] = sorted_requests[-1]['weight']

    # Fill dp array bottom-up
    for i in range(-2, -len(sorted_requests) - 1, -1):
        for j in range(i, -1, -1):
            if sorted_requests[j]['end'] <= sorted_requests[i]['start']:
                dp[i] = max(dp[i], dp[j] + sorted_requests[i]['weight'])
            
    # Return the maximum weight achievable
    return dp[0]

# Test data
requests = [{'id': 1, 'start': 0, 'end': 5, 'weight': 10}, {'id': 2, 'start': 1, 'end': 8, 'weight': 8}]
print("Maximum weight:", weighted_interval_scheduling(requests))
```

By understanding the principles discussed in this blog post, readers will gain valuable insights into the world of scheduling theory, algorithms, and systems, enabling them to tackle challenging real-world problems effectively.

Citations:
[1] https://www.stern.nyu.edu/om/faculty/pinedo/scheduling/shakhlevich/handout01.pdf
[2] https://www.tutorialspoint.com/operating_system/os_process_scheduling_algorithms.htm
[3] https://www.cs.umd.edu/class/fall2017/cmsc451-0101/Lects/lect10-dp-intv-sched.pdf
[4] https://web.mit.edu/15.053/www/AMP-Chapter-09.pdf
[5] https://www.nii.ac.jp/userimg/lectures/20131010/Lecture1.pdf
[6] https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/
[7] https://www.geeksforgeeks.org/weighted-job-scheduling/
[8] https://www.sciencedirect.com/topics/computer-science/scheduling-theory
[9] https://en.wikipedia.org/wiki/Scheduling_(computing)
[10] https://courses.cs.washington.edu/courses/cse521/13wi/slides/06dp-sched.pdf
[11] https://link.springer.com/chapter/10.1007/978-3-540-69446-5_4
[12] https://www.advsyscon.com/blog/job-scheduling-algorithms/
[13] https://www.educative.io/answers/what-is-weighted-job-scheduling-in-dynamic-programming
[14] https://www.amazon.com/Introduction-Scheduling-Chapman-Computational-Science/dp/1138117722
[15] https://www.guru99.com/cpu-scheduling-algorithms.html
[16] https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/dynamicp.pdf
[17] https://greenbeanbookspdx.indielite.org/book/9781138117723
[18] https://www.javatpoint.com/os-scheduling-algorithms
[19] https://youtube.com/watch?v=iIX1YvbLbvc
[20] https://sites.google.com/cs.uni.wroc.pl/boehm/scheduling-theory-21
[21] https://www.scaler.com/topics/operating-system/scheduling-algorithms-in-os/
[22] https://www.sciencedirect.com/science/article/pii/0895717790903703/pdf?md5=c6befa39de273118a4711537ae9418a6&pid=1-s2.0-0895717790903703-main.pdf
[23] https://en.wikipedia.org/wiki/Scheduling_(production_processes)
[24] https://data-flair.training/blogs/scheduling-algorithms-in-operating-system/
[25] https://www.cs.toronto.edu/~toni/Courses/364-2002/Notes/lect10.pdf

