[
  {
    "objectID": "schedule-probabilities.html",
    "href": "schedule-probabilities.html",
    "title": "Experiments",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import poisson\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nimport unittest\n\n# \"\"\"\n# Function to calculate the convolution of two arrays.\n# \n# Args:\n#     a (numpy.ndarray): The first array to be convolved.\n#     b (numpy.ndarray): The second array to be convolved.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the two input arrays.\n# \"\"\"\ndef convolve(a, b):\n    \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # Compute the convolution of the two arrays.\n    for i in range(len(a)):\n        # Get subsets of array expanded to the right.\n        a_sub = a[0:i + 1].copy()\n        b_sub = b[0:i + 1].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n    \n    for i in range(1,len(a)):\n        # Get subsets of array collapse from the right.\n        a_sub = a[i:].copy()\n        b_sub = b[i:].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n        \n    return c\n\n\n# \"\"\"\n# Function to convolve a distribution with itself n times.\n# \n# Args:\n#     a (numpy.ndarray): The distribution to be convolved.\n#     n (int): The number of times to convolve the distribution with itself.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\ndef convolve_n(a, n):\n        \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # If n is 0, return an array of zeros with length equal to the length of a, except for the first element which is 1.\n    if n == 0:\n        c = np.array(np.zeros(len(a)), dtype=np.float64)\n        c[0] = 1\n        return c\n    \n    # Convolve the distribution with itself n times.\n    for i in range(n):\n        # If this is the first iteration, set c equal to a.\n        if i == 0:\n            c = a\n        # Otherwise, convolve c with a.\n        else:\n            c = np.convolve(c, a)\n            \n    return c\n# \n# \"\"\"\n# Function to create an array of zero arrays according to a given shape array.\n# \n# Args:\n#      num_zeros (numpy.ndarray): The shape array.\n#      l (int): The length of the zeros array.\n#  \n# Returns:\n#      numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\n\ndef zero_arrays(num_zeros, l):\n    result = []\n    for n in num_zeros:\n        zeros = np.zeros(l)\n        result.append([zeros] * n)\n    return result\n\nzero_arrays(np.array([1, 0, 3]), 4)\n\ndef calc_distr_limit(l):\n    return int(max(l+4*l**0.5, 100))\n\n\nclass TestConvolve(unittest.TestCase):\n    \n    def test_convolve(self):\n        a = np.array([\n            0.4456796414,\n            0.160623141,\n            0.137676978,\n            0.1032577335])\n\n        b = np.array([\n            0.006737946999,\n            0.033689735,\n            0.08422433749,\n            0.1403738958])\n\n        expected_output = np.convolve(a, b)\n        \n        self.assertTrue(np.allclose(convolve(a, b), expected_output))\n        \nif __name__ == '__main__':\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n\n\n\nzero_arrays(np.array([1, 0, 3]), 4)\n\n[[array([0., 0., 0., 0.])],\n [],\n [array([0., 0., 0., 0.]), array([0., 0., 0., 0.]), array([0., 0., 0., 0.])]]\n\n\nA schedule with T intervals can have T states. A state of a schedule at interval T is defined by \\(p^-_t(i)\\), the amount of work left at the end of the state at interval \\(t-1\\) and \\(v_t(i)\\), the arriving amount of work in interval \\(t\\).\n\n\"\"\"\nA schedule class with a constructor and a method to calculate the system states.\n\"\"\"\nclass Schedule:\n    def __init__(self, x, d, s):\n            # Initialize the parameters dictionary with x, d, and s.\n            self.parameters = dict({'x': x, 'd': d, 's': s})\n            # Initialize the system dictionary with p_min and v.\n            self.system = dict({\n                'p_min': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64),\n                'p_plus': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64)\n            })\n            # Set the initial state to 0.\n            self.state = 0\n            # Set the first element of p_min in the initial state to 1.\n            self.system['p_min'][self.state][0] = 1\n            # Set the first row of v to s.\n            # self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]\n            # Set p_plus to v.\n            # self.system['p_plus'] = self.system['v'].copy()\n            # Initialize array of arrays for saving waiting times distributions per patient\n            self.system['w'] = zero_arrays(self.parameters['x'].copy(), len(self.parameters['s']))\n            if(self.parameters['x'][0] &gt; 0): # Only calculate waiting times if there are patients scheduled in the state\n                     self.system['w'][0][0] = self.system['p_min'][0].copy()\n                     for i in range(1, self.parameters['x'][0]):\n                            self.system['w'][0][i] = np.convolve(self.system['w'][0][i-1], self.parameters['s'])[:(len(self.parameters['s']))]\n            self.system['p_plus'][0] = self.system['p_min'][0].copy() if self.parameters['x'][0] == 0 else np.convolve(self.system['w'][0][-1], self.parameters['s'])[:(len(self.parameters['s']))]\n            # Initializ array for saving total expected waiting times per state\n            self.system['ew'] = np.zeros(len(self.parameters['x']), dtype=np.float64)\n        \n    def calculate_system_states(self, until = 1):\n\n            while self.state &lt; until:\n                \"\"\"Set state to 1, because state 0 has already been calculated in the constructor.\n                TO CHECK: WHAT HAPPENS IF SOMETHING CHANGES IN STATE 0?\n                \"\"\"\n                \n                self.state += 1\n                \n                \"\"\"The probability that the amount of work left in the system equals zero just before state t starts is the probablity that the total amount work in state t-1 was less than or equal to the interval length d.\"\"\"\n                \n                self.system['p_min'][self.state][0] = np.sum(self.system['p_plus'][self.state-1][:(self.parameters['d'] + 1)])\n                \n                \"\"\"The probability that the amount of work left in the system equals i just before state t starts is the probablity that the total amount work in state t-1 exceeded the interval length d with amount i.\"\"\"\n                \n                self.system['p_min'][self.state][1:(-1*self.parameters['d'])] = self.system['p_plus'][self.state-1][(self.parameters['d'] + 1):]\n                \n                \"\"\"Service time distribution are calculated as n times convolutions, where n is the number of clients scheduled. The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                # self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]\n                \n                \"\"\"The distribution of waiting times of the first patient in state t equals p_min. \n                The distribution of waiting times of the second patient in state t equals the convolution of the distribution \n                of waiting times of the first patient in state t and the service time distribution. \n                The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                if(self.parameters['x'][self.state] &gt; 0): # Only calculate waiting times if there are patients scheduled in the state\n                     self.system['w'][self.state][0] = self.system['p_min'][self.state].copy()\n                     for i in range(1, self.parameters['x'][self.state]):\n                            self.system['w'][self.state][i] = np.convolve(self.system['w'][self.state][i-1], self.parameters['s'])[:(len(self.parameters['s']))]\n\n                \n                \n                \"\"\"The probablitity that the amount of work left in the system equals i just before state t ends equals \n                the convolution of the waiting time distribution of the last arriving patient and the service time distribution. \n                Unless there are no patients in the state t. In that case the distributio of total work just before t ends is equal \n                to the distribution of work at the beginning of t. \n                The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                self.system['p_plus'][self.state] = self.system['p_min'][self.state].copy() if self.parameters['x'][self.state] == 0 else np.convolve(self.system['w'][self.state][-1], self.parameters['s'])[:(len(self.parameters['s']))]\n    \n    def calculate_wait_times(self, until = 1):\n    # Initialize time counter\n      t = 0\n      # Calculate the expected waiting time for each time step\n      for t, w in enumerate(self.system['w']):\n          ew = 0\n          for i in w:\n              # Calculate the weighted sum of the waiting time distribution\n              a = range(len(i))\n              b = i\n              wt = np.dot(a, b)\n              ew += wt\n          # Store the expected waiting time for the current time step\n          self.system['ew'][t] = ew\n        \n        \n    def visualize_state(self, state=-1, dist='p_plus'):\n        \"\"\"\n        Visualize a distribution in the last given state.\n        \"\"\"\n        if state == -1:\n            state = self.state\n        trace = go.Scatter(\n            x=list(range(len(self.system[dist][state]))),\n            y=self.system[dist][state],\n            mode='lines'\n        )\n        \n        data = [trace]\n        \n        layout = go.Layout(\n            title=f'{dist} in state {state}',\n            xaxis=dict(title='Time'),\n            yaxis=dict(title='Probability')\n        )\n        \n        fig = go.Figure(data=data, layout=layout)\n        pyo.iplot(fig)\n    \n    def visualize_system(self, dist='p_plus'):\n         \n         trace = go.Heatmap(\n                    z=self.system[dist],\n                    text=np.around(self.system[dist], 2),\n                    texttemplate=\"%{text}\",\n                    textfont={\"size\":10}\n                    )\n         data = [trace]\n\n         layout = go.Layout(\n            title=f'{dist}',\n            xaxis=dict(title='Time'),\n            yaxis=dict(title='Probability')\n        )\n         fig = go.Figure(data=data, layout=layout)\n         fig.show()\n        \n    def __str__(self):\n        \"\"\"\n        Print all probabilities\n        \"\"\"\n        return(\"p_min = % s \\nw = % s \\np_plus = % s \\new = % s\" % (self.system['p_min'], self.system['w'], self.system['p_plus'], self.system['ew']))\n\nThe code above defines a Schedule class that is used to calculate the probability distributions of the amount of work in a system at different states. The class has a constructor that takes three parameters x, d, and s, which represent the number of clients scheduled, the interval length, and the service time distribution, respectively.\nThe constructor initializes the parameters dictionary with the input parameters, and the system dictionary with two NumPy arrays p_min and p_plus. The p_min array represents the probability distribution of the amount of work in the system just before a state starts, and the p_plus array represents the probability distribution of the total amount of work in the system until a state ends. The constructor also initializes the state variable to 0, and sets the first element of p_min in the initial state to 1. Additionally, the constructor initializes an array of arrays for saving waiting times distributions per patient, w, and an array for saving total expected waiting times per state, ew.\nThe Schedule class has two methods calculate_system_states and calculate_wait_times. The calculate_system_states method calculates the probability distributions of the amount of work in the system at different states. The method uses a while loop to iterate over the states, starting from state 1. For each state, the method calculates the probability distribution of the amount of work in the system just before the state starts (p_min), and the probability distribution of the amount of work in the system just after the state ends (p_plus). The method also calculates the waiting time distribution of the patients in the state (w). The calculate_wait_times method calculates the expected waiting time for each time step.\nThe Schedule class also has a visualize_p_plus method that visualizes the p_plus array in the last calculated state. The method uses the Plotly library to create a scatter plot of the p_plus array.\nFinally, the Schedule class has a __str__ method that returns a string representation of the p_min, w, p_plus, and ew arrays.\nTo improve the readability of the code, the Schedule class could be refactored to use more descriptive variable names. Additionally, the calculate_system_states method could be split into smaller methods to improve its readability and maintainability. Finally, the visualize_p_plus method could be modified to take a state parameter, allowing the user to visualize the p_plus array for any state.\n\ndef run_schedule(x, d, s, u=1, print_schedule=True):\n  schedule = Schedule(x=x, d=d, s=s)\n  schedule.calculate_system_states(until=u)\n  schedule.calculate_wait_times(until=u)\n  if(print_schedule): print(schedule)\n  return(schedule)\n\n\n\"\"\"Simple test case\"\"\"\n\nx = np.array([2, 0, 3, 1, 1], dtype=np.int64)\nd = 3\ns=np.array(\n    [0.1, 0.2, 0.3, 0.2, 0.15, 0.05, 0, 0, 0, 0, 0, 0, 0, 0], dtype=np.float64)\nu = 4\n\nsch = run_schedule(x, d, s, u, False)\n\nsch.visualize_system('p_min')\n\n\n                                                \n\n\n\n\"\"\"\"Test case with validation in spreadsheet\nurl: https://docs.google.com/spreadsheets/d/1_l9bMqEfLT2-TpZz3MrDFIid30ZsywTVH8Lzc5uHrGw/edit?usp=sharing\"\"\"\nx = np.array([1, 0, 1, 0, 1, 0, 1], dtype=np.int64)\nd = 3\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 2\n  \nsch = run_schedule(x, d, s, u, False)\n\nsch.visualize_system('p_min')\n\n\n                                                \n\n\n\n\"\"\"\"Test case with more than 1 clients in the system at the same time\nurl: https://docs.google.com/spreadsheets/d/1_l9bMqEfLT2-TpZz3MrDFIid30ZsywTVH8Lzc5uHrGw/edit?usp=sharing\"\"\"\nx = np.array([1, 0, 1, 0, 1, 1, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 4\n  \nsch = run_schedule(x, d, s, u, False)\n\n\nsch.visualize_state()\n\n\n                                                \n\n\n\nsch.visualize_system('p_min')\n\n\n                                                \n\n\n\nsch.visualize_system('p_plus')"
  },
  {
    "objectID": "sched-sim.html",
    "href": "sched-sim.html",
    "title": "Scheduling Simulation",
    "section": "",
    "text": "Load libraries.\n\n## Libraries\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nDefine functions:\n\nlogn_mean_lns(m, s) transforms a mean and standard deviation from a lognormal distribution to parameters for a normal distribution. This is necessary when using the random lognormal sampling function. It uses a normal mean and standard deviation as inputs. However, for our simulation we define a mean and standard deviations from a lognormal distribution:\n\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an array with normal mean and standard deviation\ngenerate_logn_sts(s, n, mu, lns) generates a matrix with service times randomly selected from a lognormal distribution:\n\ns = number of rows\nn = number of columns\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an s x n matrix with random service times.\ngenerate_client(cts, sts, pct, ns=0) generates one client. A client is represented by a client type and a service time:\n\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\n\nReturns an array with client type and service time (zero when no-show).\nsimulate(iats, cts, sts, pct, ns, logs=False) simulates one schedule:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\nsimulate_crn(iats, cts, sts, logs=False) simulates one schedule using common random numbers.:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Must have same length as iats.\nsts is an array with randomly generated service times (with zeros for no-shows). Must have same length as iats.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\ntransform_iats_schedule(iats: list[int], d: int, T: int) transforms a list with inter-arrival times per client to a schedule with clients per time slot.:\n\niats is a list with interarrival times per client as integers\nd is the length of a time slot\nT is the number of intervals in the schedule\n\nReturns an array of number of clients.\ntransform_schedule_iats(schedule: list[int], d: int) transforms a schedule with clients per time slot to a list with inter-arrival times per client :\n\nschedule is a list with number of clients per time slot as integers\nd is the length of a time slot\n\nReturns an array of inter-arrival times.\n\n\n## Functions\n\n### Lognormal mean and lns / see: https://en.wikipedia.org/wiki/Log-normal_distribution\n\ndef logn_mean_lns(lnm, lns):\n  sigma = np.sqrt(np.log(1 + (lns/lnm)**2))\n  mu = np.log(lnm**2 / np.sqrt(lnm**2 + lns**2))\n  return np.array([mu, sigma])\n\n### Random lognormal service times generator\ndef generate_logn_sts(s, n, lnm, lns):\n  sts = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=s * n)\n  return np.reshape(sts, (s, n))\n\n##############\n#### TEST ####\ngenerate_logn_sts(5, 5, 14, 10)\ngenerate_logn_sts(1, 8, 14, 10)\n##############\n\n### Client generator\ndef generate_client(cts, sts, pct, ns=0):\n  ct = np.random.choice(cts, size = 1, p=pct)[0] # generate random client type\n  st = np.random.binomial(n=1, p=1-ns)*np.random.choice(sts, size = 1)[0] # generate random service time / if no-show -&gt; st = 0\n  return np.array([ct, st])\n\n### Simulation\n### ATTENTION: handling of emergency patients has not yet been implemented\n\ndef simulate(iats, cts, sts, pct, ns, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct, st = generate_client(cts, sts, pct, ns) # client type and service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef simulate_crn(iats, cts, sts, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct =  cts[i]# client type\n    st =  sts[i]# service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef transform_iats_schedule(iats: list, d: int, T: int):\n  iats = np.array(iats)\n  ats = np.cumsum(iats)\n  sats = np.arange(d*(T+1),step = d)\n  schedule = np.histogram(ats, bins=sats)\n  return schedule\n\n##############\n#### TEST ####\ntransform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)\n##############\n\ndef transform_schedule_iats(schedule: list, d: int):\n  schedule = np.array(schedule)\n  T = schedule.size\n  sats = np.arange(d*T,step = d)\n  ats = np.repeat(sats, schedule)\n  iats = np.diff(ats)\n  iats = np.insert(iats, 0, ats[0])\n  return iats\n\n##############\n#### TEST ####\nschedule = transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)[0]\ntransform_schedule_iats(schedule, d = 15)\n##############\n\narray([ 0,  0, 30,  0, 60,  0,  0,  0, 60,  0,  0,  0])\n\n\nConfigure global simulation parameters.\n\n## Variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # Percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False"
  },
  {
    "objectID": "sched-sim.html#setup",
    "href": "sched-sim.html#setup",
    "title": "Scheduling Simulation",
    "section": "",
    "text": "Load libraries.\n\n## Libraries\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nDefine functions:\n\nlogn_mean_lns(m, s) transforms a mean and standard deviation from a lognormal distribution to parameters for a normal distribution. This is necessary when using the random lognormal sampling function. It uses a normal mean and standard deviation as inputs. However, for our simulation we define a mean and standard deviations from a lognormal distribution:\n\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an array with normal mean and standard deviation\ngenerate_logn_sts(s, n, mu, lns) generates a matrix with service times randomly selected from a lognormal distribution:\n\ns = number of rows\nn = number of columns\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an s x n matrix with random service times.\ngenerate_client(cts, sts, pct, ns=0) generates one client. A client is represented by a client type and a service time:\n\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\n\nReturns an array with client type and service time (zero when no-show).\nsimulate(iats, cts, sts, pct, ns, logs=False) simulates one schedule:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\nsimulate_crn(iats, cts, sts, logs=False) simulates one schedule using common random numbers.:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Must have same length as iats.\nsts is an array with randomly generated service times (with zeros for no-shows). Must have same length as iats.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\ntransform_iats_schedule(iats: list[int], d: int, T: int) transforms a list with inter-arrival times per client to a schedule with clients per time slot.:\n\niats is a list with interarrival times per client as integers\nd is the length of a time slot\nT is the number of intervals in the schedule\n\nReturns an array of number of clients.\ntransform_schedule_iats(schedule: list[int], d: int) transforms a schedule with clients per time slot to a list with inter-arrival times per client :\n\nschedule is a list with number of clients per time slot as integers\nd is the length of a time slot\n\nReturns an array of inter-arrival times.\n\n\n## Functions\n\n### Lognormal mean and lns / see: https://en.wikipedia.org/wiki/Log-normal_distribution\n\ndef logn_mean_lns(lnm, lns):\n  sigma = np.sqrt(np.log(1 + (lns/lnm)**2))\n  mu = np.log(lnm**2 / np.sqrt(lnm**2 + lns**2))\n  return np.array([mu, sigma])\n\n### Random lognormal service times generator\ndef generate_logn_sts(s, n, lnm, lns):\n  sts = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=s * n)\n  return np.reshape(sts, (s, n))\n\n##############\n#### TEST ####\ngenerate_logn_sts(5, 5, 14, 10)\ngenerate_logn_sts(1, 8, 14, 10)\n##############\n\n### Client generator\ndef generate_client(cts, sts, pct, ns=0):\n  ct = np.random.choice(cts, size = 1, p=pct)[0] # generate random client type\n  st = np.random.binomial(n=1, p=1-ns)*np.random.choice(sts, size = 1)[0] # generate random service time / if no-show -&gt; st = 0\n  return np.array([ct, st])\n\n### Simulation\n### ATTENTION: handling of emergency patients has not yet been implemented\n\ndef simulate(iats, cts, sts, pct, ns, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct, st = generate_client(cts, sts, pct, ns) # client type and service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef simulate_crn(iats, cts, sts, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct =  cts[i]# client type\n    st =  sts[i]# service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef transform_iats_schedule(iats: list, d: int, T: int):\n  iats = np.array(iats)\n  ats = np.cumsum(iats)\n  sats = np.arange(d*(T+1),step = d)\n  schedule = np.histogram(ats, bins=sats)\n  return schedule\n\n##############\n#### TEST ####\ntransform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)\n##############\n\ndef transform_schedule_iats(schedule: list, d: int):\n  schedule = np.array(schedule)\n  T = schedule.size\n  sats = np.arange(d*T,step = d)\n  ats = np.repeat(sats, schedule)\n  iats = np.diff(ats)\n  iats = np.insert(iats, 0, ats[0])\n  return iats\n\n##############\n#### TEST ####\nschedule = transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)[0]\ntransform_schedule_iats(schedule, d = 15)\n##############\n\narray([ 0,  0, 30,  0, 60,  0,  0,  0, 60,  0,  0,  0])\n\n\nConfigure global simulation parameters.\n\n## Variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # Percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False"
  },
  {
    "objectID": "sched-sim.html#run-simulation-1",
    "href": "sched-sim.html#run-simulation-1",
    "title": "Scheduling Simulation",
    "section": "Run simulation 1",
    "text": "Run simulation 1\n\nConfigure parameters.\n\n# configure parameters\nlnm = 14 \nlns = 5\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], dtype=object) # inter-arrival times\nnsims = nsims # number of simulations\nctsm = np.random.choice(cts, size = (nsims * len(iats)), p=pct).reshape((nsims, len(iats))) # client types matrix\nstsm = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=(nsims * len(iats))).reshape((nsims, len(iats))) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = nsims * len(iats)).reshape((nsims, len(iats))) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimres = [] # array for saving simulation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n  \nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time= {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time= 3.1268551209807733')]"
  },
  {
    "objectID": "sched-sim.html#run-simulation-2",
    "href": "sched-sim.html#run-simulation-2",
    "title": "Scheduling Simulation",
    "section": "Run simulation 2",
    "text": "Run simulation 2\n\nConfigure parameters.\n\n# Configure parameters\nlnm = 14\nlns = 10\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) # inter-arrival times\nnsims = nsims # number of simulations\nctsm = np.random.choice(cts, size = (nsims * len(iats)), p=pct).reshape((nsims, len(iats))) # client types matrix\nstsm = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=(nsims * len(iats))).reshape((nsims, len(iats))) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = nsims * len(iats)).reshape((nsims, len(iats))) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimres = [] # array for saving silnmlation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n\nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times.\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time = {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time = 11.132911512359671')]"
  },
  {
    "objectID": "sched-sim.html#run-simulation-3",
    "href": "sched-sim.html#run-simulation-3",
    "title": "Scheduling Simulation",
    "section": "Run simulation 3",
    "text": "Run simulation 3\n\nConfigure parameters.\n\n# configure parameters\nlnm = 14\nlns = 10\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 0, 0, 0, 60, 0, 0, 0, 60, 0, 0, 0]) # inter-arrival times\n\nnsims = nsims # number of simulations\nsimres = [] # array for saving simulation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n  \nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time = {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time = 22.751546318950503')]"
  },
  {
    "objectID": "sim-based-opt.html",
    "href": "sim-based-opt.html",
    "title": "Simulation Based Optimization",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 15 # interval time\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for array service"
  },
  {
    "objectID": "sim-based-opt.html#setup",
    "href": "sim-based-opt.html#setup",
    "title": "Simulation Based Optimization",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 15 # interval time\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for array service"
  },
  {
    "objectID": "sim-based-opt.html#run-simulations",
    "href": "sim-based-opt.html#run-simulations",
    "title": "Simulation Based Optimization",
    "section": "Run simulations",
    "text": "Run simulations\n\n# Simulation 1\n\ntic = time.time()\nsim = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nN = len(iats) # number of patients\n# T = len(sim) # number of intervals\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimreswt = []\nsimresln = 0\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = loss = 0.5 * mwt + 0.5 * mln\ntoc = time.time()\nprint(toc - tic)\n# plots\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\n1.7903759479522705\n\n\nText(0.5, 1.0, 'schedule: [1 1 1 1 1 1 1 1 1 1 1 1], mwt: 1.626305421235067, mln: 1.9640933698014567, loss: 1.795199395518262')\n\n\n\n\n\n\n\n\n\n# Simulation 2\n\nsim = np.array([2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plot histogram of waiting times\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [2 0 1 1 1 1 1 1 1 1 1 1], mwt: 2.21140522301421, mln: 1.9604057188966308, loss: 2.0859054709554203')\n\n\n\n\n\n\n\n\n\n# Simulation 3\n\nsim = np.array([1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plot histogram of waiting times\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [1 1 1 2 0 1 1 1 1 1 1 1], mwt: 2.2995127375214923, mln: 1.9542053689772578, loss: 2.126859053249375')\n\n\n\n\n\n\n\n\n\n# Simulation 4\n\nsim = np.array([1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plots\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [1 1 1 1 1 2 0 1 1 1 1 1], mwt: 2.3052128431709313, mln: 1.9407754161202555, loss: 2.122994129645593')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experiments",
    "section": "",
    "text": "This site contains the code experiments for my research on appointment scheduling optimization. Specifically I am working on solution methods for single stage stochastic programming problems (1-SSP) and so-called off-line scheduling system. In an off-line scheduling system all patients that want an appointment in a specific time-frame (e.g. day) are gathered first and then given an appointment time. An example of such a problem is scheduling a number of patients into a series of fixed time slots for a single physician. Each patient will have a certain service time that can not be predicted, but has some known distribution with a mean and variance. If a certain patient needs more time to consult than his time slot the next patient will start later. In case the patient finishes earlier, the doctor has idle time.\nBoth waiting times - for patient and doctor - are undesirable. The question is how to find an optimal schedule that minimizes total waiting times. Weights can be given to both types of waiting times to accommodate for different utilities of saved time for patients and doctors.\nSolution methods for these kinds of problems can be divided into two types: (1) analytical and (2) numerical. Analytical methods applies mathematical principles to a problem in order to obtain provable results. Numerical methods use sets of iterative procedures to find solutions to problems that are hard to solve by analytical methods. A numerical method is considered accurate if it finds: (1) an optimal solution in a given time or (2) a perturbed (or near-optimal) solution with a known deterministic error bound, which is a bound on the solution’s (relative or absolute) optimality gap. An inaccurate method does not produce an error bound and the quality of the solution can not be determined (Ahmadi-Javid, Jalali, and Klassen 2017).\nIdeas:\n\nApply utility function to waiting times -&gt; one minute of waiting is more acceptable than 30 minutes of waiting.\n\n\n\n\n\n\nReferences\n\nAhmadi-Javid, Amir, Zahra Jalali, and Kenneth J Klassen. 2017. “Outpatient Appointment Systems in Healthcare: A Review of Optimization Studies.” European Journal of Operational Research 258 (1): 3–34. https://doi.org/10.1016/j.ejor.2016.06.064."
  },
  {
    "objectID": "search-function.html",
    "href": "search-function.html",
    "title": "Search Function",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 12 # number of intervals\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = np.zeros(T) \ni = np.arange(T, step=2)\nsim[i] = 1\nsim[-1] = 1\nsim[0] = 2 \nsim = sim.astype(int) # initial schedule\nN = np.sum(sim)\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows"
  },
  {
    "objectID": "search-function.html#setup",
    "href": "search-function.html#setup",
    "title": "Search Function",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 12 # number of intervals\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = np.zeros(T) \ni = np.arange(T, step=2)\nsim[i] = 1\nsim[-1] = 1\nsim[0] = 2 \nsim = sim.astype(int) # initial schedule\nN = np.sum(sim)\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows"
  },
  {
    "objectID": "search-function.html#run-simulations-and-search",
    "href": "search-function.html#run-simulations-and-search",
    "title": "Search Function",
    "section": "Run simulations and search",
    "text": "Run simulations and search\n\nprint(f'Running {nsims} simulations with {N} patients and {T} timeslots.')\n\n# Get start time and set timer seconds\nstart_time = time.time()\nseconds = 30\nbestresult = {\n          'schedule': None,\n          'iats': None,\n          'iats_diff': None,\n          'loss': None,\n          'calc_time': None\n          } # Dictionary for saving best result\n\n# Start timer while loop\nwhile True:\n    current_time = time.time()\n    elapsed_time = current_time - start_time\n    \n    if elapsed_time &gt; seconds:\n        print(f\"Finished iterating in: {str(int(elapsed_time))} seconds\\n\")\n        print(f\"Best result:\\nschedule: {bestresult['schedule']},\\niats: {bestresult['iats']},\\niats_diff: {bestresult['iats_diff']},\\nloss = {bestresult['loss']}, calc time: {bestresult['calc_time']} secs\\n\")\n        break\n      \n    \n    ## data preparation\n    psm = fn.patient_shift_matrix(sim).astype(int)\n    print(\"Generated new psm\\n\")\n    transf_to_iats = lambda x: fn.transform_schedule_iats(x, d) \n    iats_sm = np.apply_along_axis(transf_to_iats, 1, psm) # iats shifting matrix\n    iats_d_sm = np.diff(iats_sm) # first derivative iats shifting matrix\n    \n    ## Start iterator for inter arrival times in shift matrix\n    results = [] # start list for saving results\n    for iats in iats_sm:\n      tic = time.time()\n      simreswt = [None] * nsims # array for saving waiting times\n      simresln = 0 # array for saving lateness\n      \n      for i in range(nsims): # simulate nsims number of times\n        experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n        simreswt[i] = experiment[0].mean()\n        ln = max(0, (experiment[1] - d))\n        simresln += ln\n        \n      mwt = np.array(simreswt).mean()\n      mln = simresln / nsims\n      loss = 0.5 * mwt + 0.5 * mln\n      toc = time.time()\n      result = {\n          'schedule': fn.transform_iats_schedule(iats, d, T)[0],\n          'iats': iats,\n          'iats_diff': np.diff(iats),\n          'loss': loss,\n          'calc_time': toc - tic\n        }\n      if bestresult['loss'] == None: # save first result as bestresult\n            bestresult = result\n      if result['loss'] &lt; bestresult['loss']: # break loop on first improvement of loss value\n            sim = result['schedule'] # assign current best schedule as new starting point for search\n            bestresult = result\n            print(f\"\\n#### Found better schedule: {result['schedule']} with loss: {result['loss']}\\n\")\n            break\n      \n      results.append(result)\n      print(f\"schedule: {result['schedule']},\\niats: {result['iats']},\\niats_diff: {result['iats_diff']},\\nloss = {result['loss']}, calc time: {result['calc_time']} secs\\n\")\n\nRunning 100000 simulations with 8 patients and 12 timeslots.\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 0 1 0 1 1],\niats: [ 0  0 20 20 20 20 20 10],\niats_diff: [  0  20   0   0   0   0 -10],\nloss = 3.661097963178163, calc time: 1.3872859477996826 secs\n\nschedule: [1 0 1 0 1 0 1 0 1 0 1 2],\niats: [ 0 20 20 20 20 20 10  0],\niats_diff: [ 20   0   0   0   0 -10 -10],\nloss = 7.270067395857499, calc time: 1.4305880069732666 secs\n\nschedule: [2 1 0 0 1 0 1 0 1 0 1 1],\niats: [ 0  0 10 30 20 20 20 10],\niats_diff: [  0  10  20 -10   0   0 -10],\nloss = 4.019923093752004, calc time: 1.3848340511322021 secs\n\nschedule: [2 0 1 1 0 0 1 0 1 0 1 1],\niats: [ 0  0 20 10 30 20 20 10],\niats_diff: [  0  20 -10  20 -10   0 -10],\nloss = 3.8928942897684795, calc time: 1.3767917156219482 secs\n\nschedule: [2 0 1 0 1 1 0 0 1 0 1 1],\niats: [ 0  0 20 20 10 30 20 10],\niats_diff: [  0  20   0 -10  20 -10 -10],\nloss = 3.8275190329012907, calc time: 1.3872089385986328 secs\n\nschedule: [2 0 1 0 1 0 1 1 0 0 1 1],\niats: [ 0  0 20 20 20 10 30 10],\niats_diff: [  0  20   0   0 -10  20 -20],\nloss = 3.7667196026676617, calc time: 1.3879380226135254 secs\n\n\n#### Found better schedule: [2 0 1 0 1 0 1 0 1 1 0 1] with loss: 3.0453857325203684\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 0 1 1 0 1],\niats: [ 0  0 20 20 20 20 10 20],\niats_diff: [  0  20   0   0   0 -10  10],\nloss = 3.0453857325203684, calc time: 1.3979971408843994 secs\n\nschedule: [1 0 1 0 1 0 1 0 1 1 0 2],\niats: [ 0 20 20 20 20 10 20  0],\niats_diff: [ 20   0   0   0 -10  10 -20],\nloss = 6.305830425181746, calc time: 1.4223382472991943 secs\n\nschedule: [2 1 0 0 1 0 1 0 1 1 0 1],\niats: [ 0  0 10 30 20 20 10 20],\niats_diff: [  0  10  20 -10   0 -10  10],\nloss = 3.403676210539972, calc time: 1.3807580471038818 secs\n\nschedule: [2 0 1 1 0 0 1 0 1 1 0 1],\niats: [ 0  0 20 10 30 20 10 20],\niats_diff: [  0  20 -10  20 -10 -10  10],\nloss = 3.274579104608133, calc time: 1.40687894821167 secs\n\nschedule: [2 0 1 0 1 1 0 0 1 1 0 1],\niats: [ 0  0 20 20 10 30 10 20],\niats_diff: [  0  20   0 -10  20 -20  10],\nloss = 3.1973284292466744, calc time: 1.3803179264068604 secs\n\n\n#### Found better schedule: [2 0 1 0 1 0 1 1 0 1 0 1] with loss: 2.9078769746102484\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 1 0 1 0 1],\niats: [ 0  0 20 20 20 10 20 20],\niats_diff: [  0  20   0   0 -10  10   0],\nloss = 2.9078769746102484, calc time: 1.4773790836334229 secs\n\nschedule: [1 0 1 0 1 0 1 1 0 1 0 2],\niats: [ 0 20 20 20 10 20 20  0],\niats_diff: [ 20   0   0 -10  10   0 -20],\nloss = 6.062971290278159, calc time: 1.3976776599884033 secs\n\nschedule: [2 1 0 0 1 0 1 1 0 1 0 1],\niats: [ 0  0 10 30 20 10 20 20],\niats_diff: [  0  10  20 -10 -10  10   0],\nloss = 3.2648377514742513, calc time: 1.390462875366211 secs\n\nschedule: [2 0 1 1 0 0 1 1 0 1 0 1],\niats: [ 0  0 20 10 30 10 20 20],\niats_diff: [  0  20 -10  20 -20  10   0],\nloss = 3.129110772615485, calc time: 1.371920108795166 secs\n\n\n#### Found better schedule: [2 0 1 0 1 1 0 1 0 1 0 1] with loss: 2.9012873830773565\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 20 20 10 20 20 20],\niats_diff: [  0  20   0 -10  10   0   0],\nloss = 2.9012873830773565, calc time: 1.4069139957427979 secs\n\nschedule: [1 0 1 0 1 1 0 1 0 1 0 2],\niats: [ 0 20 20 10 20 20 20  0],\niats_diff: [ 20   0 -10  10   0   0 -20],\nloss = 5.994477376293785, calc time: 1.4207251071929932 secs\n\nschedule: [2 1 0 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 10 30 10 20 20 20],\niats_diff: [  0  10  20 -20  10   0   0],\nloss = 3.2535384729161487, calc time: 1.4254951477050781 secs\n\nschedule: [2 0 1 1 0 1 0 1 0 1 0 1],\niats: [ 0  0 20 10 20 20 20 20],\niats_diff: [  0  20 -10  10   0   0   0],\nloss = 2.997865683560268, calc time: 1.615185022354126 secs\n\nschedule: [2 0 1 0 2 0 0 1 0 1 0 1],\niats: [ 0  0 20 20  0 30 20 20],\niats_diff: [  0  20   0 -20  30 -10   0],\nloss = 3.312792924663543, calc time: 1.5099527835845947 secs\n\nschedule: [2 0 1 0 1 1 1 0 0 1 0 1],\niats: [ 0  0 20 20 10 10 30 20],\niats_diff: [  0  20   0 -10   0  20 -10],\nloss = 3.132139416797089, calc time: 1.6170439720153809 secs\n\nschedule: [2 0 1 0 1 1 0 1 1 0 0 1],\niats: [ 0  0 20 20 10 20 10 30],\niats_diff: [  0  20   0 -10  10 -10  20],\nloss = 3.014178988417628, calc time: 1.681849718093872 secs\n\nschedule: [2 0 1 0 1 1 0 1 0 1 1 0],\niats: [ 0  0 20 20 10 20 20 10],\niats_diff: [  0  20   0 -10  10   0 -10],\nloss = 4.041639239818646, calc time: 1.5357129573822021 secs\n\nFinished iterating in: 37 seconds\n\nBest result:\nschedule: [2 0 1 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 20 20 10 20 20 20],\niats_diff: [  0  20   0 -10  10   0   0],\nloss = 2.9012873830773565, calc time: 1.3931779861450195 secs\n\n\n\n\ndef distribute_elements(n, t):\n    quotient, remainder = divmod(t, n-1)\n    elements = np.zeros(t)\n    for i in range(n-1):\n        elements[i * quotient] = 1\n    elements[0] = elements[0] + 1\n    return elements\n  \n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 20 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 24 # number of intervals\nN = 9 # number of patients\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = distribute_elements(N, T)\nsim = sim.astype(int) # initial schedule\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\n\n\nprint(f'Running {nsims} simulations with {N} patients and {T} timeslots.')\n\n# Get start time and set timer seconds\nstart_time = time.time()\nseconds = 300\nbestresult = {\n          'schedule': None,\n          'iats': None,\n          'iats_diff': None,\n          'loss': None,\n          'calc_time': None\n          } # Dictionary for saving best result\n\n# Start timer while loop\nwhile True:\n    current_time = time.time()\n    elapsed_time = current_time - start_time\n    \n    if elapsed_time &gt; seconds:\n        print(f\"Finished iterating in: {str(int(elapsed_time))} seconds\\n\")\n        print(f\"Best result:\\nschedule: {bestresult['schedule']},\\niats: {bestresult['iats']},\\niats_diff: {bestresult['iats_diff']},\\nloss = {bestresult['loss']}, calc time: {bestresult['calc_time']} secs\\n\")\n        break\n      \n    \n    ## data preparation\n    psm = fn.patient_shift_matrix(sim).astype(int)\n    print(\"Generated new psm\\n\")\n    transf_to_iats = lambda x: fn.transform_schedule_iats(x, d) \n    iats_sm = np.apply_along_axis(transf_to_iats, 1, psm) # iats shifting matrix\n    iats_d_sm = np.diff(iats_sm) # first derivative iats shifting matrix\n    \n    ## Start iterator for inter arrival times in shift matrix\n    results = [] # start list for saving results\n    for iats in iats_sm:\n      tic = time.time()\n      simreswt = [None] * nsims # array for saving waiting times\n      simresln = 0 # array for saving lateness\n      \n      for i in range(nsims): # simulate nsims number of times\n        experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n        simreswt[i] = experiment[0].mean()\n        ln = max(0, (experiment[1] - d))\n        simresln += ln\n        \n      mwt = np.array(simreswt).mean()\n      mln = simresln / nsims\n      loss = 0.5 * mwt + 0.5 * mln\n      toc = time.time()\n      result = {\n          'schedule': fn.transform_iats_schedule(iats, d, T)[0],\n          'iats': iats,\n          'iats_diff': np.diff(iats),\n          'loss': loss,\n          'calc_time': toc - tic\n        }\n      if bestresult['loss'] == None: # save first result as bestresult\n            bestresult = result\n      if result['loss'] &lt; bestresult['loss']: # break loop on first improvement of loss value\n            sim = result['schedule'] # assign current best schedule as new starting point for search\n            bestresult = result\n            print(f\"\\n#### Found better schedule: {result['schedule']} with loss: {result['loss']}\\n\")\n            break\n      \n      results.append(result)\n      print(f\"schedule: {result['schedule']},\\niats: {result['iats']},\\niats_diff: {result['iats_diff']},\\nloss = {result['loss']}, calc time: {result['calc_time']} secs\\n\")\n\nRunning 100000 simulations with 9 patients and 24 timeslots.\nGenerated new psm\n\nschedule: [2 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0],\niats: [ 0  0 30 30 30 30 30 30 30],\niats_diff: [ 0 30  0  0  0  0  0  0],\nloss = 5.108284084996704, calc time: 1.6209089756011963 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1] with loss: 4.498170460209998\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 30 30 30 30 20],\niats_diff: [ 30   0   0   0   0   0   0 -10],\nloss = 4.498170460209998, calc time: 1.6427311897277832 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 2],\niats: [30 30 30 30 30 30 30 20  0],\niats_diff: [  0   0   0   0   0   0 -10 -20],\nloss = 12.164361928384526, calc time: 1.7687129974365234 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 20 40 30 30 30 30 30 20],\niats_diff: [ 20  20 -10   0   0   0   0 -10],\nloss = 4.569734031927946, calc time: 1.9941320419311523 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 20 40 30 30 30 30 20],\niats_diff: [ 30 -10  20 -10   0   0   0 -10],\nloss = 4.572483568556477, calc time: 1.7262780666351318 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 20 40 30 30 30 20],\niats_diff: [ 30   0 -10  20 -10   0   0 -10],\nloss = 4.572627113414332, calc time: 1.6901202201843262 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 20 40 30 30 20],\niats_diff: [ 30   0   0 -10  20 -10   0 -10],\nloss = 4.572519980971154, calc time: 1.617222785949707 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 30 20 40 30 20],\niats_diff: [ 30   0   0   0 -10  20 -10 -10],\nloss = 4.570393863216464, calc time: 1.5187199115753174 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1],\niats: [ 0 30 30 30 30 30 20 40 20],\niats_diff: [ 30   0   0   0   0 -10  20 -20],\nloss = 4.55282828564922, calc time: 1.509902000427246 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1] with loss: 4.016514812527413\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 30 30 30 20 30],\niats_diff: [ 30   0   0   0   0   0 -10  10],\nloss = 4.016514812527413, calc time: 1.6623587608337402 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 2],\niats: [30 30 30 30 30 30 20 30  0],\niats_diff: [  0   0   0   0   0 -10  10 -30],\nloss = 11.506113726403502, calc time: 1.5640230178833008 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 20 40 30 30 30 30 20 30],\niats_diff: [ 20  20 -10   0   0   0 -10  10],\nloss = 4.08807838424536, calc time: 1.6184382438659668 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 20 40 30 30 30 20 30],\niats_diff: [ 30 -10  20 -10   0   0 -10  10],\nloss = 4.090794518196965, calc time: 1.5656540393829346 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 20 40 30 30 20 30],\niats_diff: [ 30   0 -10  20 -10   0 -10  10],\nloss = 4.090954777569051, calc time: 1.4940388202667236 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 20 40 30 20 30],\niats_diff: [ 30   0   0 -10  20 -10 -10  10],\nloss = 4.090475255525456, calc time: 1.4853880405426025 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 30 20 40 20 30],\niats_diff: [ 30   0   0   0 -10  20 -20  10],\nloss = 4.085318799728998, calc time: 1.504390001296997 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1] with loss: 3.961364849745979\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 30 30 20 30 30],\niats_diff: [ 30   0   0   0   0 -10  10   0],\nloss = 3.961364849745979, calc time: 1.5557539463043213 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 2],\niats: [30 30 30 30 30 20 30 30  0],\niats_diff: [  0   0   0   0 -10  10   0 -30],\nloss = 11.430469956239019, calc time: 1.5606470108032227 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 30 30 20 30 30],\niats_diff: [ 20  20 -10   0   0 -10  10   0],\nloss = 4.032921226991387, calc time: 1.5746839046478271 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 30 30 20 30 30],\niats_diff: [ 30 -10  20 -10   0 -10  10   0],\nloss = 4.035611174726215, calc time: 1.5005230903625488 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 40 30 20 30 30],\niats_diff: [ 30   0 -10  20 -10 -10  10   0],\nloss = 4.035601297167394, calc time: 1.4933128356933594 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 20 40 20 30 30],\niats_diff: [ 30   0   0 -10  20 -20  10   0],\nloss = 4.033033894915385, calc time: 1.5714788436889648 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.9537703769309047\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 30 20 30 30 30],\niats_diff: [ 30   0   0   0 -10  10   0   0],\nloss = 3.9537703769309047, calc time: 1.4948129653930664 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 30 30 20 30 30 30  0],\niats_diff: [  0   0   0 -10  10   0   0 -30],\nloss = 11.420736353094714, calc time: 1.45930814743042 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 30 20 30 30 30],\niats_diff: [ 20  20 -10   0 -10  10   0   0],\nloss = 4.025310003443797, calc time: 1.4901988506317139 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 30 20 30 30 30],\niats_diff: [ 30 -10  20 -10 -10  10   0   0],\nloss = 4.027804039007345, calc time: 1.4680802822113037 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 40 20 30 30 30],\niats_diff: [ 30   0 -10  20 -20  10   0   0],\nloss = 4.025742681409006, calc time: 1.4596037864685059 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.9530966972008845\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 20 30 30 30 30],\niats_diff: [ 30   0   0 -10  10   0   0   0],\nloss = 3.9530966972008845, calc time: 1.4809110164642334 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 30 20 30 30 30 30  0],\niats_diff: [  0   0 -10  10   0   0   0 -30],\nloss = 11.419459609223642, calc time: 1.4685719013214111 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 20 30 30 30 30],\niats_diff: [ 20  20 -10 -10  10   0   0   0],\nloss = 4.024428230321755, calc time: 1.4898760318756104 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 20 30 30 30 30],\niats_diff: [ 30 -10  20 -20  10   0   0   0],\nloss = 4.024920289293697, calc time: 1.4801607131958008 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.9529334982465802\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 30 30 30 30 30],\niats_diff: [ 30   0 -10  10   0   0   0   0],\nloss = 3.9529334982465802, calc time: 1.4714059829711914 secs\n\nschedule: [0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 20 30 30 30 30 30  0],\niats_diff: [  0 -10  10   0   0   0   0 -30],\nloss = 11.418968296650988, calc time: 1.4591002464294434 secs\n\nschedule: [1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 20 30 30 30 30 30],\niats_diff: [ 20  20 -20  10   0   0   0   0],\nloss = 4.0220709782109765, calc time: 1.4834952354431152 secs\n\n\n#### Found better schedule: [1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.952674955860991\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 30 30 30 30 30 30],\niats_diff: [ 30 -10  10   0   0   0   0   0],\nloss = 3.952674955860991, calc time: 1.4829719066619873 secs\n\nschedule: [0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 20 30 30 30 30 30 30  0],\niats_diff: [-10  10   0   0   0   0   0 -30],\nloss = 11.41559652872879, calc time: 1.458772897720337 secs\n\n\n#### Found better schedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.949307650040059\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4744138717651367 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.475679636001587 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4690072536468506 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4725639820098877 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4720120429992676 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4663429260253906 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4654312133789062 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4656848907470703 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.479330062866211 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4945859909057617 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4756908416748047 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4693870544433594 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4615702629089355 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.477484941482544 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4669959545135498 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.493638277053833 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5858161449432373 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4594337940216064 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4948039054870605 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4907798767089844 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4736380577087402 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4472849369049072 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4987657070159912 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4552817344665527 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4792289733886719 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4953620433807373 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4711108207702637 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4699082374572754 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4828591346740723 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4956719875335693 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4785997867584229 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4807980060577393 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4857542514801025 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4608221054077148 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4743142127990723 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.480499267578125 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4747099876403809 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.549917221069336 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4709398746490479 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4930970668792725 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.485835075378418 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4525690078735352 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4804859161376953 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.482022762298584 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4826788902282715 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4757461547851562 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5155689716339111 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.456981897354126 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4564790725708008 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.51149582862854 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.484184980392456 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4946317672729492 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4862010478973389 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4832746982574463 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4764678478240967 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.461806058883667 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5030081272125244 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4938111305236816 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.5516009330749512 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.5437102317810059 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4880719184875488 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4668071269989014 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.5182831287384033 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.5146639347076416 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4773120880126953 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4848430156707764 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.473876953125 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.464425802230835 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.456299066543579 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.517333984375 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.4812941551208496 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4860968589782715 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4641749858856201 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4615590572357178 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4805850982666016 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4894869327545166 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4864120483398438 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4599089622497559 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.475511074066162 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4618310928344727 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.6243181228637695 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4610466957092285 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4852089881896973 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4946391582489014 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4869129657745361 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4789080619812012 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4985909461975098 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.5301733016967773 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4878571033477783 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4884850978851318 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5071890354156494 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4878580570220947 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4966459274291992 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4914400577545166 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4947903156280518 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4971041679382324 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5275242328643799 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.5075037479400635 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.7648050785064697 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.5409858226776123 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5067191123962402 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4860270023345947 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4859530925750732 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4721078872680664 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4667441844940186 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4646921157836914 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5279359817504883 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.49757981300354 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.452392816543579 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.5165166854858398 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5135722160339355 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.455916166305542 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4749479293823242 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4674980640411377 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.473383903503418 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4781410694122314 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.5096120834350586 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.469243049621582 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4732048511505127 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4619519710540771 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5127618312835693 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4940032958984375 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4818520545959473 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.497804880142212 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4708402156829834 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4753129482269287 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.470201015472412 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4724199771881104 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4928278923034668 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4743812084197998 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5487370491027832 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4877841472625732 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4884822368621826 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4668231010437012 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4632148742675781 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4567301273345947 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4764678478240967 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4771108627319336 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.475682020187378 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4822189807891846 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5019888877868652 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4653980731964111 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.4728641510009766 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4859929084777832 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4581058025360107 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.461029052734375 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4596891403198242 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4676101207733154 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4694857597351074 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.488708734512329 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5386888980865479 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.32853289009352, calc time: 1.4734671115875244 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.282920771457124, calc time: 1.464994192123413 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.056425994200198, calc time: 1.4868049621582031 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.027506042029247, calc time: 1.4683010578155518 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.024368263109382, calc time: 1.4648840427398682 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.023107945479397, calc time: 1.4853808879852295 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.020685493953893, calc time: 1.4617931842803955 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.991497121688682, calc time: 1.4631400108337402 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.585234098845269, calc time: 1.4751067161560059 secs\n\nFinished iterating in: 305 seconds\n\nBest result:\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.949307650040059, calc time: 1.5009379386901855 secs"
  },
  {
    "objectID": "scratchpad.html",
    "href": "scratchpad.html",
    "title": "scratchpad",
    "section": "",
    "text": "import numpy as np\nimport functions as fn\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\n\nem = np.random.poisson(0.5, 12).astype(int)\nem_stsm = [np.random.lognormal(mean = nm, sigma=ns, size=i).sum() for i in em]\nprint(f'em: {em}, em_stsm: {em_stsm}')\n\nem: [1 1 0 0 0 1 0 0 1 0 2 1], em_stsm: [26.168101756152154, 12.739668196867147, 0.0, 0.0, 0.0, 16.35904627724699, 0.0, 0.0, 7.760463859780136, 0.0, 22.315866113560936, 13.07401705354758]"
  },
  {
    "objectID": "schedule-probabilities-old.html",
    "href": "schedule-probabilities-old.html",
    "title": "Schedule probabilities",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import poisson\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nimport unittest\n\n# \"\"\"\n# Function to calculate the convolution of two arrays.\n# \n# Args:\n#     a (numpy.ndarray): The first array to be convolved.\n#     b (numpy.ndarray): The second array to be convolved.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the two input arrays.\n# \"\"\"\ndef convolve(a, b):\n    \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # Compute the convolution of the two arrays.\n    for i in range(len(a)):\n        # Get subsets of array expanded to the right.\n        a_sub = a[0:i + 1].copy()\n        b_sub = b[0:i + 1].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n    \n    for i in range(1,len(a)):\n        # Get subsets of array collapse from the right.\n        a_sub = a[i:].copy()\n        b_sub = b[i:].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n        \n    return c\n\n\n# \"\"\"\n# Function to convolve a distribution with itself n times.\n# \n# Args:\n#     a (numpy.ndarray): The distribution to be convolved.\n#     n (int): The number of times to convolve the distribution with itself.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\ndef convolve_n(a, n):\n        \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # If n is 0, return an array of zeros with length equal to the length of a, except for the first element which is 1.\n    if n == 0:\n        c = np.array(np.zeros(len(a)), dtype=np.float64)\n        c[0] = 1\n        return c\n    \n    # Convolve the distribution with itself n times.\n    for i in range(n):\n        # If this is the first iteration, set c equal to a.\n        if i == 0:\n            c = a\n        # Otherwise, convolve c with a.\n        else:\n            c = np.convolve(c, a)\n            \n    return c\n# \n# \"\"\"\n# Function to create an array of zero arrays according to a given shape array.\n# \n# Args:\n#      num_zeros (numpy.ndarray): The shape array.\n#      l (int): The length of the zeros array.\n#  \n# Returns:\n#      numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\n\ndef zero_arrays(num_zeros, l):\n    result = []\n    for n in num_zeros:\n        zeros = np.zeros(l)\n        result.append([zeros] * n)\n    return result\n\nzero_arrays(np.array([1, 0, 3]), 4)\n\n\ndef calc_distr_limit(l):\n    return int(max(l+4*l**0.5, 100))\n\n\nclass TestConvolve(unittest.TestCase):\n    \n    def test_convolve(self):\n        a = np.array([\n            0.4456796414,\n            0.160623141,\n            0.137676978,\n            0.1032577335])\n\n        b = np.array([\n            0.006737946999,\n            0.033689735,\n            0.08422433749,\n            0.1403738958])\n\n        expected_output = np.convolve(a, b)\n        \n        self.assertTrue(np.allclose(convolve(a, b), expected_output))\n        \nif __name__ == '__main__':\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n\n\n\n# \"\"\"\n# A schedule class with a constructor and a method to calculate the system states.\n# \"\"\"\nclass Schedule:\n    def __init__(self, x, d, s):\n            # Initialize the parameters dictionary with x, d, and s.\n            self.parameters = dict({'x': x, 'd': d, 's': s})\n            # Initialize the system dictionary with p_min and v.\n            self.system = dict({\n                'p_min': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64),\n                'v': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64)\n            })\n            # Set the initial state to 0.\n            self.state = 0\n            # Set the first element of p_min in the initial state to 1.\n            self.system['p_min'][self.state][0] = 1\n            # Set the first row of v to s.\n            self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]\n            # Set p_plus to v.\n            self.system['p_plus'] = self.system['v'].copy()\n            # Initialize array of arrays for saving waiting times distributions per patient\n            self.system['w'] = zero_arrays(self.parameters['x'].copy(), len(self.parameters['s']))\n            # Initializ array for saving total expected waiting times per state\n            self.system['ew'] = np.zeros(len(self.parameters['x']), dtype=np.float64)\n        \n    def calculate_system_states(self, until = 1):\n\n            while self.state &lt; until:\n                \"\"\"Set state to 1, because state 0 has already been calculated in the constructor.\"\"\"\n                \n                self.state += 1\n                \n                \"\"\"The probability that the amount of work left in the system equals zero just before state t starts is the probablity that the total amount work in state t-1 was less than or equal to the interval length d.\"\"\"\n                \n                self.system['p_min'][self.state][0] = np.sum(self.system['p_plus'][self.state-1][:(self.parameters['d'] + 1)])\n                \n                \"\"\"The probability that the amount of work left in the system equals i just before state t starts is the probablity that the total amount work in state t-1 exceeded the interval length d with amount i.\"\"\"\n                \n                self.system['p_min'][self.state][1:(-1*self.parameters['d'])] = self.system['p_plus'][self.state-1][(self.parameters['d'] + 1):]\n                \n                \"\"\"Service time distribution are calculated as n times convolutions, where n is the number of clients scheduled. The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                self.system['v'][self.state] = convolve_n(self.parameters['s'].copy(), self.parameters['x'][self.state])[:(len(self.parameters['s']))]\n                \n                \"\"\"The probablitity that the amount of work left in the system equals i just before state t ends equals the convolution of the probability that the amount of work left in the system equals i just before state t starts and the service time distribution. The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                self.system['p_plus'][self.state] = np.convolve(self.system['p_min'][self.state], self.system['v'][self.state])[:(len(self.parameters['s']))]\n    \n    def calculate_wait_times(self, until = 1):\n    # Initialize time counter\n      t = 0\n    # Loop until the specified time limit is reached\n      while t &lt; until:\n          # Check if there are any patients arriving at time t\n          if self.parameters['x'][t] &gt; 0:\n              # For the first patient, the waiting time distribution is the same as the service time distribution\n              self.system['w'][t][0] = self.system['p_min'][t].copy()\n\n              # For subsequent patients, the waiting time distribution is the convolution of the waiting time\n              # distribution of the previous patient with the service time distribution\n              for i in range(1, self.parameters['x'][t]):\n                  w_prev = self.system['w'][t][i - 1].copy()\n                  self.system['w'][t][i] = np.convolve(w_prev, self.parameters['s'].copy())[:len(self.parameters['s'])]\n          # Increment the time counter\n          t += 1\n      # Calculate the expected waiting time for each time step\n      for t, w in enumerate(self.system['w']):\n          ew = 0\n          for i in w:\n              # Calculate the weighted sum of the waiting time distribution\n              a = range(len(i))\n              b = i\n              wt = np.dot(a, b)\n              ew += wt\n          # Store the expected waiting time for the current time step\n          self.system['ew'][t] = ew\n        \n        \n    def visualize_p_plus(self):\n        \"\"\"\n        Visualize p_plus in the last calculated state.\n        \"\"\"\n        \n        trace = go.Scatter(\n            x=list(range(len(self.system['p_plus'][self.state]))),\n            y=self.system['p_plus'][self.state],\n            mode='lines'\n        )\n        \n        data = [trace]\n        \n        layout = go.Layout(\n            title=f'p_plus in state {self.state}',\n            xaxis=dict(title='Total amount of work in the system'),\n            yaxis=dict(title='Probability')\n        )\n        \n        fig = go.Figure(data=data, layout=layout)\n        pyo.iplot(fig)\n        \n    def __str__(self):\n        \"\"\"\n        Print all probabilities\n        \"\"\"\n        return(\"p_min = % s \\nv = % s \\np_plus = % s \\nw = % s \\new = % s\" % (self.system['p_min'], self.system['v'], self.system['p_plus'], self.system['w'], self.system['ew']))\n\nThe code above defines a Schedule class that has a constructor and a method to calculate the system states. The constructor initializes the class with three parameters: x, d, and s. These parameters are stored in a dictionary called parameters. The constructor also initializes two dictionaries called system and state. The system dictionary contains two numpy arrays called p_min and v. The state dictionary contains a single integer value that is initialized to 0.\nThe calculate_system_states method takes an optional parameter called until that defaults to 1. This method calculates the system states until the specified until value is reached. The method uses a while loop to iterate over the states until the until value is reached. The first step in the loop is to increment the state value by 1.\nThe next step is to calculate the probability that the amount of work left in the system equals zero just before state t starts. This is done by summing the probability of all the previous states that have a total amount of work less than or equal to the interval length d. The result is stored in the p_min array.\nThe next step is to calculate the probability that the amount of work left in the system equals i just before state t starts. This is done by taking the probability of all the previous states that have a total amount of work greater than the interval length d with an amount of i. The result is stored in the p_min array.\nThe next step is to calculate the service time distribution. This is done by taking the convolution of the service time distribution s with the number of clients scheduled x for the current state. The result is stored in the v array.\nThe final step is to calculate the probability that the amount of work left in the system equals i just before state t ends. This is done by taking the convolution of the probability that the amount of work left in the system equals i just before state t starts and the service time distribution. The result is stored in the p_plus array.\nThe method called visualize_p_plus the p_plus array in the last state of the system. The p_plus array is calculated in the calculate_system_states method and represents the probability that the amount of work left in the system equals i just before state t ends.\nThe code defines a method called visualize_p_plus that is a part of the Schedule class. This method visualizes the p_plus array in the last state of the system. The p_plus array is calculated in the calculate_system_states method and represents the probability that the amount of work left in the system equals i just before state t ends.\nThe visualize_p_plus method uses the plotly library to create a line plot of the p_plus array in the last state. The go.Scatter function is used to create a trace object that represents the data to be plotted. The x parameter of the trace object is set to a list of integers representing the total amount of work in the system, and the y parameter is set to the p_plus array in the last state. The mode parameter is set to 'lines' to create a line plot.\nThe trace object is then added to a list called data, which is used to create a layout object. The title, xaxis, and yaxis parameters of the layout object are set to specify the title and axis labels for the plot.\nFinally, a Figure object is created using the data and layout objects, and the pyo.iplot function is used to display the plot.\n\nx = np.array([2, 0, 3, 1, 1], dtype=np.int64)\nd = 3\ns=np.array(\n    [0.1, 0.2, 0.3, 0.2, 0.15, 0.05, 0, 0, 0, 0, 0, 0, 0, 0], dtype=np.float64)\nu = 4\n\ndef run_schedule(x, d, s, u=1):\n  schedule = Schedule(x=x, d=d, s=s)\n  schedule.calculate_system_states(until=u)\n  schedule.calculate_wait_times(until=u)\n  print(schedule)\n  return(schedule)\n  \nrun_schedule(x, d, s, u)\n\np_min = [[1.         0.         0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.        ]\n [0.31       0.2        0.19       0.15       0.09       0.0425\n  0.015      0.0025     0.         0.         0.         0.\n  0.         0.        ]\n [0.85       0.09       0.0425     0.015      0.0025     0.\n  0.         0.         0.         0.         0.         0.\n  0.         0.        ]\n [0.0691325  0.08326    0.124165   0.15440625 0.16200125 0.14572875\n  0.11234375 0.07456313 0.04231    0.02028188 0.00818    0.\n  0.         0.        ]\n [0.15795213 0.11135275 0.13407363 0.1426495  0.13541313 0.114013\n  0.08528725 0.056618   0.03298422 0.01658503 0.00679378 0.\n  0.         0.        ]] \nv = [[0.01     0.04     0.1      0.16     0.2      0.19     0.15     0.09\n  0.0425   0.015    0.0025   0.       0.       0.      ]\n [1.       0.       0.       0.       0.       0.       0.       0.\n  0.       0.       0.       0.       0.       0.      ]\n [0.001    0.006    0.021    0.05     0.0915   0.1335   0.162    0.165\n  0.14325  0.1055   0.066    0.0345   0.014625 0.004875]\n [0.1      0.2      0.3      0.2      0.15     0.05     0.       0.\n  0.       0.       0.       0.       0.       0.      ]\n [0.1      0.2      0.3      0.2      0.15     0.05     0.       0.\n  0.       0.       0.       0.       0.       0.      ]] \np_plus = [[0.01       0.04       0.1        0.16       0.2        0.19\n  0.15       0.09       0.0425     0.015      0.0025     0.\n  0.         0.        ]\n [0.31       0.2        0.19       0.15       0.09       0.0425\n  0.015      0.0025     0.         0.         0.         0.\n  0.         0.        ]\n [0.00085    0.00519    0.0184325  0.04466    0.08326    0.124165\n  0.15440625 0.16200125 0.14572875 0.11234375 0.07456313 0.04231\n  0.02028188 0.00818   ]\n [0.00691325 0.0221525  0.04980825 0.07907813 0.11135275 0.13407363\n  0.1426495  0.13541313 0.114013   0.08528725 0.056618   0.03298422\n  0.01658503 0.00679378]\n [0.01579521 0.0427257  0.08306355 0.10607593 0.12825667 0.13269402\n  0.12616384 0.11210688 0.09045524 0.0661708  0.04370899 0.02568817\n  0.01313367 0.00549572]] \nw = [[array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), array([0.1 , 0.2 , 0.3 , 0.2 , 0.15, 0.05, 0.  , 0.  , 0.  , 0.  , 0.  ,\n       0.  , 0.  , 0.  ])], [], [array([0.85  , 0.09  , 0.0425, 0.015 , 0.0025, 0.    , 0.    , 0.    ,\n       0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]), array([8.5000e-02, 1.7900e-01, 2.7725e-01, 2.0700e-01, 1.6150e-01,\n       6.9500e-02, 1.4625e-02, 4.8750e-03, 1.1250e-03, 1.2500e-04,\n       0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]), array([8.50000e-03, 3.49000e-02, 8.90250e-02, 1.46850e-01, 1.89275e-01,\n       1.87900e-01, 1.55750e-01, 1.01475e-01, 5.39500e-02, 2.31250e-02,\n       7.00625e-03, 1.72500e-03, 4.37500e-04, 7.50000e-05])], [array([0.0691325 , 0.08326   , 0.124165  , 0.15440625, 0.16200125,\n       0.14572875, 0.11234375, 0.07456313, 0.04231   , 0.02028188,\n       0.00818   , 0.        , 0.        , 0.        ])], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])]] \new = [2.25       0.         7.4399125  3.97027875 0.        ]\n\n\n&lt;__main__.Schedule at 0x7f8e28fab1f0&gt;\n\n\n\n# \"\"\"\"Test case with validation in spreadsheet\n# url: https://docs.google.com/spreadsheets/d/1_l9bMqEfLT2-TpZz3MrDFIid30ZsywTVH8Lzc5uHrGw/edit?usp=sharing\n# \"\"\"\nx = np.array([1, 0, 1, 0, 1, 0, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 2\n  \nrun_schedule(x, d, s, u)\n\np_min = [[1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [9.57379076e-01 2.25289600e-02 1.12644800e-02 5.19899078e-03\n  2.22813891e-03 8.91255562e-04 3.34220836e-04 1.17960295e-04\n  3.93200983e-05 1.24168732e-05 3.72506195e-06 1.06430341e-06\n  2.90264567e-07 7.57211915e-08 1.89302979e-08 4.54327149e-09\n  1.04844727e-09 2.32988281e-10 4.99260603e-11 1.03295297e-11\n  2.06590594e-12 3.99852763e-13 7.49723931e-14 1.36313442e-14\n  2.40553133e-15 4.12376799e-16 6.87294666e-17 1.11453189e-17\n  1.75978720e-18 2.70736492e-19 4.06104737e-20 5.94299616e-21\n  8.48999451e-22 1.18465040e-22 1.61543236e-23 2.15390981e-24\n  2.80944758e-25 3.58652883e-26 4.48316103e-27 5.48958494e-28\n  6.58750193e-29 7.75000227e-30 8.94231031e-31 1.01233702e-31\n  1.12481891e-32 1.22707517e-33 1.31472340e-34 1.38391937e-35\n  1.43164072e-36 1.45590582e-37 1.45590582e-38 1.43203851e-39\n  1.38584372e-40 1.31985116e-41 1.23736047e-42 1.14217889e-43\n  1.03834445e-44 9.29860698e-46 8.20465322e-47 7.13448106e-48\n  6.11526948e-49 5.16783336e-50 4.30652780e-51 3.53961189e-52\n  2.86995559e-53 2.29596447e-54 1.81260353e-55 1.41241833e-56\n  1.08647564e-57 8.25171374e-59 6.18878530e-60 4.58428541e-61\n  3.35435518e-62 2.42483507e-63 1.73202505e-64 1.22260592e-65\n  8.52980872e-67 5.88262671e-68 4.01088184e-69 2.70396529e-70\n  1.80264353e-71 1.18855617e-72 7.75145329e-74 5.00093760e-75\n  3.19208783e-76 2.01605547e-77 1.26003467e-78 7.79402889e-80\n  4.77185442e-81 2.89203298e-82 1.73521979e-83 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nv = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \np_plus = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [2.37310547e-03 1.42944765e-02 4.30788826e-02 8.66174018e-02\n  1.30743507e-01 1.58065295e-01 1.59481117e-01 1.38176822e-01\n  1.04997465e-01 7.11296466e-02 4.35307607e-02 2.43350499e-02\n  1.25470426e-02 6.01842799e-03 2.70736867e-03 1.15097004e-03\n  4.65871307e-04 1.80842695e-04 6.77925422e-05 2.46988229e-05\n  8.79333477e-06 3.07209022e-06 1.05606619e-06 3.57645658e-07\n  1.19317189e-07 3.91786586e-08 1.26447118e-08 4.00552376e-09\n  1.24378045e-09 3.78201069e-10 1.12535389e-10 3.27536005e-11\n  9.32293340e-12 2.59520051e-12 7.06602548e-13 1.88221260e-13\n  4.90662284e-14 1.25217803e-14 3.12951983e-15 7.66268518e-16\n  1.83882458e-16 4.32631997e-17 9.98334344e-18 2.26031300e-18\n  5.02282584e-19 1.09587688e-19 2.34829126e-20 4.94375001e-21\n  1.02284217e-21 2.08035367e-22 4.16070336e-23 8.18498550e-24\n  1.58419019e-24 3.01750450e-25 5.65782024e-26 1.04452058e-26\n  1.89912825e-27 3.40142364e-28 6.00251222e-29 1.04391516e-29\n  1.78956884e-30 3.02462337e-31 5.04103895e-32 8.28663936e-33\n  1.34377935e-33 2.15004697e-34 3.39481100e-35 5.29061454e-36\n  8.13940699e-37 1.23636562e-37 1.85454843e-38 2.74747915e-39\n  4.02070120e-40 5.81306197e-41 8.30437425e-42 1.17238225e-42\n  1.63588220e-43 2.25638925e-44 3.07689443e-45 4.14862170e-46\n  5.53149560e-47 7.29427991e-48 9.51427815e-49 1.22764879e-49\n  1.56721123e-50 1.97963523e-51 2.47454404e-52 3.06129160e-53\n  3.74852032e-54 4.54366100e-55 5.45239320e-56 6.47809093e-57\n  7.62128344e-58 8.87916518e-59 1.02451906e-59 1.17087892e-60\n  1.32552331e-61 1.48656820e-62 1.65174244e-63 1.81843205e-64\n  1.98374405e-65]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nw = [[array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])]] \new = [0. 0. 0. 0. 0. 0. 0.]\n\n\n&lt;__main__.Schedule at 0x7f8e28f78fd0&gt;\n\n\n\n# \"\"\"Test case with more than 1 clients in the system at the same time\n# \"\"\"\nx = np.array([1, 0, 2, 0, 1, 0, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 4\n  \nschedule = run_schedule(x, d, s, u)\nschedule.visualize_p_plus()\n\np_min = [[1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [9.57379076e-01 2.25289600e-02 1.12644800e-02 5.19899078e-03\n  2.22813891e-03 8.91255562e-04 3.34220836e-04 1.17960295e-04\n  3.93200983e-05 1.24168732e-05 3.72506195e-06 1.06430341e-06\n  2.90264567e-07 7.57211915e-08 1.89302979e-08 4.54327149e-09\n  1.04844727e-09 2.32988281e-10 4.99260603e-11 1.03295297e-11\n  2.06590594e-12 3.99852763e-13 7.49723931e-14 1.36313442e-14\n  2.40553133e-15 4.12376799e-16 6.87294666e-17 1.11453189e-17\n  1.75978720e-18 2.70736492e-19 4.06104737e-20 5.94299616e-21\n  8.48999451e-22 1.18465040e-22 1.61543236e-23 2.15390981e-24\n  2.80944758e-25 3.58652883e-26 4.48316103e-27 5.48958494e-28\n  6.58750193e-29 7.75000227e-30 8.94231031e-31 1.01233702e-31\n  1.12481891e-32 1.22707517e-33 1.31472340e-34 1.38391937e-35\n  1.43164072e-36 1.45590582e-37 1.45590582e-38 1.43203851e-39\n  1.38584372e-40 1.31985116e-41 1.23736047e-42 1.14217889e-43\n  1.03834445e-44 9.29860698e-46 8.20465322e-47 7.13448106e-48\n  6.11526948e-49 5.16783336e-50 4.30652780e-51 3.53961189e-52\n  2.86995559e-53 2.29596447e-54 1.81260353e-55 1.41241833e-56\n  1.08647564e-57 8.25171374e-59 6.18878530e-60 4.58428541e-61\n  3.35435518e-62 2.42483507e-63 1.73202505e-64 1.22260592e-65\n  8.52980872e-67 5.88262671e-68 4.01088184e-69 2.70396529e-70\n  1.80264353e-71 1.18855617e-72 7.75145329e-74 5.00093760e-75\n  3.19208783e-76 2.01605547e-77 1.26003467e-78 7.79402889e-80\n  4.77185442e-81 2.89203298e-82 1.73521979e-83 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [1.96740194e-02 2.47523271e-02 4.25699598e-02 6.40815703e-02\n  8.57753007e-02 1.03372545e-01 1.13305093e-01 1.13900362e-01\n  1.05752047e-01 9.12331534e-02 7.35154380e-02 5.55837062e-02\n  3.95925379e-02 2.66651467e-02 1.70354771e-02 1.03545856e-02\n  6.00430757e-03 3.32998309e-03 1.77049933e-03 9.04464432e-04\n  4.44886358e-04 2.11130106e-04 9.68602329e-05 4.30388616e-05\n  1.85566789e-05 7.77765221e-06 3.17445959e-06 1.26387727e-06\n  4.91660939e-07 1.87166271e-07 6.98264950e-08 2.55633550e-08\n  9.19453417e-09 3.25231588e-09 1.13231285e-09 3.88268571e-10\n  1.31188629e-10 4.36913822e-11 1.43452988e-11 4.64375051e-12\n  1.48207345e-12 4.66320915e-13 1.44635287e-13 4.42174341e-14\n  1.33229666e-14 3.95605138e-15 1.15758305e-15 3.33779052e-16\n  9.48379824e-17 2.65542058e-17 7.32714094e-18 1.99259124e-18\n  5.34103000e-19 1.41124611e-19 3.67625027e-20 9.44257044e-21\n  2.39177378e-21 5.97529255e-22 1.47256275e-22 3.58040008e-23\n  8.59014712e-24 2.03399235e-24 4.75385458e-25 1.09687735e-25\n  2.49892310e-26 5.62207390e-27 1.24926407e-27 2.74214310e-28\n  5.94657811e-29 1.27422783e-29 2.69830214e-30 5.64750951e-31\n  1.16843462e-31 2.38995571e-32 4.83358132e-33 9.66710686e-34\n  1.91216667e-34 3.74118343e-35 7.24098242e-36 1.38656855e-36\n  2.62717889e-37 4.92595533e-38 9.14094100e-39 1.67894738e-39\n  3.05263030e-40 5.49473278e-41 9.79259076e-42 1.72810395e-42\n  3.01998709e-43 5.22690023e-44 8.96039975e-45 1.52157724e-45\n  2.55966254e-46 4.26610411e-47 7.04494242e-48 1.15280874e-48\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [3.40225722e-01 1.13305093e-01 1.13900362e-01 1.05752047e-01\n  9.12331534e-02 7.35154380e-02 5.55837062e-02 3.95925379e-02\n  2.66651467e-02 1.70354771e-02 1.03545856e-02 6.00430757e-03\n  3.32998309e-03 1.77049933e-03 9.04464432e-04 4.44886358e-04\n  2.11130106e-04 9.68602329e-05 4.30388616e-05 1.85566789e-05\n  7.77765221e-06 3.17445959e-06 1.26387727e-06 4.91660939e-07\n  1.87166271e-07 6.98264950e-08 2.55633550e-08 9.19453417e-09\n  3.25231588e-09 1.13231285e-09 3.88268571e-10 1.31188629e-10\n  4.36913822e-11 1.43452988e-11 4.64375051e-12 1.48207345e-12\n  4.66320915e-13 1.44635287e-13 4.42174341e-14 1.33229666e-14\n  3.95605138e-15 1.15758305e-15 3.33779052e-16 9.48379824e-17\n  2.65542058e-17 7.32714094e-18 1.99259124e-18 5.34103000e-19\n  1.41124611e-19 3.67625027e-20 9.44257044e-21 2.39177378e-21\n  5.97529255e-22 1.47256275e-22 3.58040008e-23 8.59014712e-24\n  2.03399235e-24 4.75385458e-25 1.09687735e-25 2.49892310e-26\n  5.62207390e-27 1.24926407e-27 2.74214310e-28 5.94657811e-29\n  1.27422783e-29 2.69830214e-30 5.64750951e-31 1.16843462e-31\n  2.38995571e-32 4.83358132e-33 9.66710686e-34 1.91216667e-34\n  3.74118343e-35 7.24098242e-36 1.38656855e-36 2.62717889e-37\n  4.92595533e-38 9.14094100e-39 1.67894738e-39 3.05263030e-40\n  5.49473278e-41 9.79259076e-42 1.72810395e-42 3.01998709e-43\n  5.22690023e-44 8.96039975e-45 1.52157724e-45 2.55966254e-46\n  4.26610411e-47 7.04494242e-48 1.15280874e-48 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nv = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [6.14421235e-06 7.37305482e-05 4.42383289e-04 1.76953316e-03\n  5.30859947e-03 1.27406387e-02 2.54812775e-02 4.36821900e-02\n  6.55232849e-02 8.73643799e-02 1.04837256e-01 1.14367916e-01\n  1.14367916e-01 1.05570384e-01 9.04889002e-02 7.23911201e-02\n  5.42933401e-02 3.83247107e-02 2.55498071e-02 1.61367203e-02\n  9.68203217e-03 5.53258981e-03 3.01777626e-03 1.57449196e-03\n  7.87245981e-04 3.77878071e-04 1.74405263e-04 7.75134504e-05\n  3.32200502e-05 1.37462277e-05 5.49849106e-06 2.12844815e-06\n  7.98168058e-07 2.90242930e-07 1.02438681e-07 3.51218336e-08\n  1.17072779e-08 3.79695498e-09 1.19903841e-09 3.68934897e-10\n  1.10680469e-10 3.23942836e-11 9.25550961e-12 2.58293291e-12\n  7.04436249e-13 1.87849666e-13 4.90042608e-14 1.25117262e-14\n  3.12793154e-15 7.66024051e-16 1.83845772e-16 4.32578288e-17\n  9.98257587e-18 2.26020586e-18 5.02267968e-19 1.09585738e-19\n  2.34826582e-20 4.94371753e-21 1.02283811e-21 2.08034870e-22\n  4.16069739e-23 8.18497848e-24 1.58418938e-24 3.01750359e-25\n  5.65781922e-26 1.04452047e-26 1.89912813e-27 3.40142352e-28\n  6.00251209e-29 1.04391515e-29 1.78956882e-30 3.02462336e-31\n  5.04103893e-32 8.28663934e-33 1.34377935e-33 2.15004697e-34\n  3.39481100e-35 5.29061454e-36 8.13940699e-37 1.23636562e-37\n  1.85454843e-38 2.74747915e-39 4.02070120e-40 5.81306197e-41\n  8.30437425e-42 1.17238225e-42 1.63588220e-43 2.25638925e-44\n  3.07689443e-45 4.14862170e-46 5.53149560e-47 7.29427991e-48\n  9.51427815e-49 1.22764879e-49 1.56721123e-50 1.97963523e-51\n  2.47454404e-52 3.06129160e-53 3.74852032e-54 4.54366100e-55\n  5.45239320e-56]\n [1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \np_plus = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [5.88234035e-06 7.07265069e-05 4.25258789e-04 1.70494294e-03\n  5.12758803e-03 1.23396207e-02 2.47523271e-02 4.25699598e-02\n  6.40815703e-02 8.57753007e-02 1.03372545e-01 1.13305093e-01\n  1.13900362e-01 1.05752047e-01 9.12331534e-02 7.35154380e-02\n  5.55837062e-02 3.95925379e-02 2.66651467e-02 1.70354771e-02\n  1.03545856e-02 6.00430757e-03 3.32998309e-03 1.77049933e-03\n  9.04464432e-04 4.44886358e-04 2.11130106e-04 9.68602329e-05\n  4.30388616e-05 1.85566789e-05 7.77765221e-06 3.17445959e-06\n  1.26387727e-06 4.91660939e-07 1.87166271e-07 6.98264950e-08\n  2.55633550e-08 9.19453417e-09 3.25231588e-09 1.13231285e-09\n  3.88268571e-10 1.31188629e-10 4.36913822e-11 1.43452988e-11\n  4.64375051e-12 1.48207345e-12 4.66320915e-13 1.44635287e-13\n  4.42174341e-14 1.33229666e-14 3.95605138e-15 1.15758305e-15\n  3.33779052e-16 9.48379824e-17 2.65542058e-17 7.32714094e-18\n  1.99259124e-18 5.34103000e-19 1.41124611e-19 3.67625027e-20\n  9.44257044e-21 2.39177378e-21 5.97529255e-22 1.47256275e-22\n  3.58040008e-23 8.59014712e-24 2.03399235e-24 4.75385458e-25\n  1.09687735e-25 2.49892310e-26 5.62207390e-27 1.24926407e-27\n  2.74214310e-28 5.94657811e-29 1.27422783e-29 2.69830214e-30\n  5.64750951e-31 1.16843462e-31 2.38995571e-32 4.83358132e-33\n  9.66710686e-34 1.91216667e-34 3.74118343e-35 7.24098242e-36\n  1.38656855e-36 2.62717889e-37 4.92595533e-38 9.14094100e-39\n  1.67894738e-39 3.05263030e-40 5.49473278e-41 9.79259076e-42\n  1.72810395e-42 3.01998709e-43 5.22690023e-44 8.96039975e-45\n  1.52157724e-45 2.55966254e-46 4.26610411e-47 7.04494242e-48\n  1.15280874e-48]\n [1.96740194e-02 2.47523271e-02 4.25699598e-02 6.40815703e-02\n  8.57753007e-02 1.03372545e-01 1.13305093e-01 1.13900362e-01\n  1.05752047e-01 9.12331534e-02 7.35154380e-02 5.55837062e-02\n  3.95925379e-02 2.66651467e-02 1.70354771e-02 1.03545856e-02\n  6.00430757e-03 3.32998309e-03 1.77049933e-03 9.04464432e-04\n  4.44886358e-04 2.11130106e-04 9.68602329e-05 4.30388616e-05\n  1.85566789e-05 7.77765221e-06 3.17445959e-06 1.26387727e-06\n  4.91660939e-07 1.87166271e-07 6.98264950e-08 2.55633550e-08\n  9.19453417e-09 3.25231588e-09 1.13231285e-09 3.88268571e-10\n  1.31188629e-10 4.36913822e-11 1.43452988e-11 4.64375051e-12\n  1.48207345e-12 4.66320915e-13 1.44635287e-13 4.42174341e-14\n  1.33229666e-14 3.95605138e-15 1.15758305e-15 3.33779052e-16\n  9.48379824e-17 2.65542058e-17 7.32714094e-18 1.99259124e-18\n  5.34103000e-19 1.41124611e-19 3.67625027e-20 9.44257044e-21\n  2.39177378e-21 5.97529255e-22 1.47256275e-22 3.58040008e-23\n  8.59014712e-24 2.03399235e-24 4.75385458e-25 1.09687735e-25\n  2.49892310e-26 5.62207390e-27 1.24926407e-27 2.74214310e-28\n  5.94657811e-29 1.27422783e-29 2.69830214e-30 5.64750951e-31\n  1.16843462e-31 2.38995571e-32 4.83358132e-33 9.66710686e-34\n  1.91216667e-34 3.74118343e-35 7.24098242e-36 1.38656855e-36\n  2.62717889e-37 4.92595533e-38 9.14094100e-39 1.67894738e-39\n  3.05263030e-40 5.49473278e-41 9.79259076e-42 1.72810395e-42\n  3.01998709e-43 5.22690023e-44 8.96039975e-45 1.52157724e-45\n  2.55966254e-46 4.26610411e-47 7.04494242e-48 1.15280874e-48\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [8.43335250e-04 5.34086675e-03 1.71474967e-02 3.73715812e-02\n  6.25317893e-02 8.62357041e-02 1.02831934e-01 1.09836976e-01\n  1.07918597e-01 9.94476672e-02 8.70771057e-02 7.30102372e-02\n  5.88476907e-02 4.56716475e-02 3.41502500e-02 2.46104815e-02\n  1.71010789e-02 1.14655676e-02 7.42353242e-03 4.64620456e-03\n  2.81395403e-03 1.65094922e-03 9.39316180e-04 5.18804677e-04\n  2.78450954e-04 1.45368498e-04 7.38887514e-05 3.65989898e-05\n  1.76818138e-05 8.33920777e-06 3.84261273e-06 1.73135870e-06\n  7.63401081e-07 3.29657364e-07 1.39523893e-07 5.79207282e-08\n  2.36012363e-08 9.44620962e-09 3.71620170e-09 1.43795517e-09\n  5.47606352e-10 2.05365253e-10 7.58862458e-11 2.76440386e-11\n  9.93225926e-12 3.52118352e-12 1.23222137e-12 4.25787608e-13\n  1.45320179e-13 4.89995818e-14 1.63259726e-14 5.37596101e-15\n  1.74976202e-15 5.62976952e-16 1.79070303e-16 5.63121615e-17\n  1.75083287e-17 5.38226321e-18 1.63596551e-18 4.91679709e-19\n  1.46116486e-19 4.29373851e-20 1.24768092e-20 3.58523075e-21\n  1.01880873e-21 2.86318169e-22 7.95805696e-23 2.18771451e-23\n  5.94874817e-24 1.60007316e-24 4.25758493e-25 1.12079877e-25\n  2.91921397e-26 7.52337244e-27 1.91868201e-27 4.84254407e-28\n  1.20965440e-28 2.99091257e-29 7.32046551e-30 1.77379887e-30\n  4.25538608e-31 1.01083602e-31 2.37775846e-32 5.53908469e-33\n  1.27799527e-33 2.92064575e-34 6.61186547e-35 1.48286399e-35\n  3.29493694e-36 7.25432852e-37 1.58265788e-37 3.42177535e-38\n  7.33204290e-39 1.55718958e-39 3.27819214e-40 6.84126923e-41\n  1.41540511e-41 2.90334454e-42 5.90502267e-43 1.19091473e-43\n  2.38180519e-44]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nw = [[array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([9.57379076e-01, 2.25289600e-02, 1.12644800e-02, 5.19899078e-03,\n       2.22813891e-03, 8.91255562e-04, 3.34220836e-04, 1.17960295e-04,\n       3.93200983e-05, 1.24168732e-05, 3.72506195e-06, 1.06430341e-06,\n       2.90264567e-07, 7.57211915e-08, 1.89302979e-08, 4.54327149e-09,\n       1.04844727e-09, 2.32988281e-10, 4.99260603e-11, 1.03295297e-11,\n       2.06590594e-12, 3.99852763e-13, 7.49723931e-14, 1.36313442e-14,\n       2.40553133e-15, 4.12376799e-16, 6.87294666e-17, 1.11453189e-17,\n       1.75978720e-18, 2.70736492e-19, 4.06104737e-20, 5.94299616e-21,\n       8.48999451e-22, 1.18465040e-22, 1.61543236e-23, 2.15390981e-24,\n       2.80944758e-25, 3.58652883e-26, 4.48316103e-27, 5.48958494e-28,\n       6.58750193e-29, 7.75000227e-30, 8.94231031e-31, 1.01233702e-31,\n       1.12481891e-32, 1.22707517e-33, 1.31472340e-34, 1.38391937e-35,\n       1.43164072e-36, 1.45590582e-37, 1.45590582e-38, 1.43203851e-39,\n       1.38584372e-40, 1.31985116e-41, 1.23736047e-42, 1.14217889e-43,\n       1.03834445e-44, 9.29860698e-46, 8.20465322e-47, 7.13448106e-48,\n       6.11526948e-49, 5.16783336e-50, 4.30652780e-51, 3.53961189e-52,\n       2.86995559e-53, 2.29596447e-54, 1.81260353e-55, 1.41241833e-56,\n       1.08647564e-57, 8.25171374e-59, 6.18878530e-60, 4.58428541e-61,\n       3.35435518e-62, 2.42483507e-63, 1.73202505e-64, 1.22260592e-65,\n       8.52980872e-67, 5.88262671e-68, 4.01088184e-69, 2.70396529e-70,\n       1.80264353e-71, 1.18855617e-72, 7.75145329e-74, 5.00093760e-75,\n       3.19208783e-76, 2.01605547e-77, 1.26003467e-78, 7.79402889e-80,\n       4.77185442e-81, 2.89203298e-82, 1.73521979e-83, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00]), array([2.37310547e-03, 1.42944765e-02, 4.30788826e-02, 8.66174018e-02,\n       1.30743507e-01, 1.58065295e-01, 1.59481117e-01, 1.38176822e-01,\n       1.04997465e-01, 7.11296466e-02, 4.35307607e-02, 2.43350499e-02,\n       1.25470426e-02, 6.01842799e-03, 2.70736867e-03, 1.15097004e-03,\n       4.65871307e-04, 1.80842695e-04, 6.77925422e-05, 2.46988229e-05,\n       8.79333477e-06, 3.07209022e-06, 1.05606619e-06, 3.57645658e-07,\n       1.19317189e-07, 3.91786586e-08, 1.26447118e-08, 4.00552376e-09,\n       1.24378045e-09, 3.78201069e-10, 1.12535389e-10, 3.27536005e-11,\n       9.32293340e-12, 2.59520051e-12, 7.06602548e-13, 1.88221260e-13,\n       4.90662284e-14, 1.25217803e-14, 3.12951983e-15, 7.66268518e-16,\n       1.83882458e-16, 4.32631997e-17, 9.98334344e-18, 2.26031300e-18,\n       5.02282584e-19, 1.09587688e-19, 2.34829126e-20, 4.94375001e-21,\n       1.02284217e-21, 2.08035367e-22, 4.16070336e-23, 8.18498550e-24,\n       1.58419019e-24, 3.01750450e-25, 5.65782024e-26, 1.04452058e-26,\n       1.89912825e-27, 3.40142364e-28, 6.00251222e-29, 1.04391516e-29,\n       1.78956884e-30, 3.02462337e-31, 5.04103895e-32, 8.28663936e-33,\n       1.34377935e-33, 2.15004697e-34, 3.39481100e-35, 5.29061454e-36,\n       8.13940699e-37, 1.23636562e-37, 1.85454843e-38, 2.74747915e-39,\n       4.02070120e-40, 5.81306197e-41, 8.30437425e-42, 1.17238225e-42,\n       1.63588220e-43, 2.25638925e-44, 3.07689443e-45, 4.14862170e-46,\n       5.53149560e-47, 7.29427991e-48, 9.51427815e-49, 1.22764879e-49,\n       1.56721123e-50, 1.97963523e-51, 2.47454404e-52, 3.06129160e-53,\n       3.74852032e-54, 4.54366100e-55, 5.45239320e-56, 6.47809093e-57,\n       7.62128344e-58, 8.87916518e-59, 1.02451906e-59, 1.17087892e-60,\n       1.32552331e-61, 1.48656820e-62, 1.65174244e-63, 1.81843205e-64,\n       1.98374405e-65])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])]] \new = [0.         0.         6.15466973 0.         0.         0.\n 0.        ]\n\n\n\n                                                \n\n\n\n# \"\"\"Test case with more than 1 clients in the system at the same time\n# \"\"\"\nx = np.array([1, 0, 2, 1, 1, 0, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 4\n  \nschedule = run_schedule(x, d, s, u)\nschedule.visualize_p_plus()\n\np_min = [[1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [9.57379076e-01 2.25289600e-02 1.12644800e-02 5.19899078e-03\n  2.22813891e-03 8.91255562e-04 3.34220836e-04 1.17960295e-04\n  3.93200983e-05 1.24168732e-05 3.72506195e-06 1.06430341e-06\n  2.90264567e-07 7.57211915e-08 1.89302979e-08 4.54327149e-09\n  1.04844727e-09 2.32988281e-10 4.99260603e-11 1.03295297e-11\n  2.06590594e-12 3.99852763e-13 7.49723931e-14 1.36313442e-14\n  2.40553133e-15 4.12376799e-16 6.87294666e-17 1.11453189e-17\n  1.75978720e-18 2.70736492e-19 4.06104737e-20 5.94299616e-21\n  8.48999451e-22 1.18465040e-22 1.61543236e-23 2.15390981e-24\n  2.80944758e-25 3.58652883e-26 4.48316103e-27 5.48958494e-28\n  6.58750193e-29 7.75000227e-30 8.94231031e-31 1.01233702e-31\n  1.12481891e-32 1.22707517e-33 1.31472340e-34 1.38391937e-35\n  1.43164072e-36 1.45590582e-37 1.45590582e-38 1.43203851e-39\n  1.38584372e-40 1.31985116e-41 1.23736047e-42 1.14217889e-43\n  1.03834445e-44 9.29860698e-46 8.20465322e-47 7.13448106e-48\n  6.11526948e-49 5.16783336e-50 4.30652780e-51 3.53961189e-52\n  2.86995559e-53 2.29596447e-54 1.81260353e-55 1.41241833e-56\n  1.08647564e-57 8.25171374e-59 6.18878530e-60 4.58428541e-61\n  3.35435518e-62 2.42483507e-63 1.73202505e-64 1.22260592e-65\n  8.52980872e-67 5.88262671e-68 4.01088184e-69 2.70396529e-70\n  1.80264353e-71 1.18855617e-72 7.75145329e-74 5.00093760e-75\n  3.19208783e-76 2.01605547e-77 1.26003467e-78 7.79402889e-80\n  4.77185442e-81 2.89203298e-82 1.73521979e-83 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [1.96740194e-02 2.47523271e-02 4.25699598e-02 6.40815703e-02\n  8.57753007e-02 1.03372545e-01 1.13305093e-01 1.13900362e-01\n  1.05752047e-01 9.12331534e-02 7.35154380e-02 5.55837062e-02\n  3.95925379e-02 2.66651467e-02 1.70354771e-02 1.03545856e-02\n  6.00430757e-03 3.32998309e-03 1.77049933e-03 9.04464432e-04\n  4.44886358e-04 2.11130106e-04 9.68602329e-05 4.30388616e-05\n  1.85566789e-05 7.77765221e-06 3.17445959e-06 1.26387727e-06\n  4.91660939e-07 1.87166271e-07 6.98264950e-08 2.55633550e-08\n  9.19453417e-09 3.25231588e-09 1.13231285e-09 3.88268571e-10\n  1.31188629e-10 4.36913822e-11 1.43452988e-11 4.64375051e-12\n  1.48207345e-12 4.66320915e-13 1.44635287e-13 4.42174341e-14\n  1.33229666e-14 3.95605138e-15 1.15758305e-15 3.33779052e-16\n  9.48379824e-17 2.65542058e-17 7.32714094e-18 1.99259124e-18\n  5.34103000e-19 1.41124611e-19 3.67625027e-20 9.44257044e-21\n  2.39177378e-21 5.97529255e-22 1.47256275e-22 3.58040008e-23\n  8.59014712e-24 2.03399235e-24 4.75385458e-25 1.09687735e-25\n  2.49892310e-26 5.62207390e-27 1.24926407e-27 2.74214310e-28\n  5.94657811e-29 1.27422783e-29 2.69830214e-30 5.64750951e-31\n  1.16843462e-31 2.38995571e-32 4.83358132e-33 9.66710686e-34\n  1.91216667e-34 3.74118343e-35 7.24098242e-36 1.38656855e-36\n  2.62717889e-37 4.92595533e-38 9.14094100e-39 1.67894738e-39\n  3.05263030e-40 5.49473278e-41 9.79259076e-42 1.72810395e-42\n  3.01998709e-43 5.22690023e-44 8.96039975e-45 1.52157724e-45\n  2.55966254e-46 4.26610411e-47 7.04494242e-48 1.15280874e-48\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [2.79764680e-02 2.41976714e-02 3.63335191e-02 5.02872419e-02\n  6.46699553e-02 7.77038462e-02 8.76100694e-02 9.30335212e-02\n  9.33532479e-02 8.87815808e-02 8.02426177e-02 6.90970430e-02\n  5.68169247e-02 4.47064035e-02 3.37266124e-02 2.44376663e-02\n  1.70351971e-02 1.14419874e-02 7.41557708e-03 4.64366591e-03\n  2.81318541e-03 1.65072783e-03 9.39255362e-04 5.18788709e-04\n  2.78446939e-04 1.45367529e-04 7.38885268e-05 3.65989397e-05\n  1.76818030e-05 8.33920553e-06 3.84261228e-06 1.73135861e-06\n  7.63401064e-07 3.29657361e-07 1.39523893e-07 5.79207281e-08\n  2.36012363e-08 9.44620962e-09 3.71620170e-09 1.43795517e-09\n  5.47606352e-10 2.05365253e-10 7.58862458e-11 2.76440386e-11\n  9.93225926e-12 3.52118352e-12 1.23222137e-12 4.25787608e-13\n  1.45320179e-13 4.89995818e-14 1.63259726e-14 5.37596101e-15\n  1.74976202e-15 5.62976952e-16 1.79070303e-16 5.63121615e-17\n  1.75083287e-17 5.38226321e-18 1.63596551e-18 4.91679709e-19\n  1.46116486e-19 4.29373851e-20 1.24768092e-20 3.58523075e-21\n  1.01880873e-21 2.86318169e-22 7.95805696e-23 2.18771451e-23\n  5.94874817e-24 1.60007316e-24 4.25758493e-25 1.12079877e-25\n  2.91921397e-26 7.52337244e-27 1.91868201e-27 4.84254407e-28\n  1.20965440e-28 2.99091257e-29 7.32046551e-30 1.77379887e-30\n  4.25538608e-31 1.01083602e-31 2.37775846e-32 5.53908469e-33\n  1.27799527e-33 2.92064575e-34 6.61186547e-35 1.48286399e-35\n  3.29493694e-36 7.25432852e-37 1.58265788e-37 3.42177535e-38\n  7.33204290e-39 1.55718958e-39 3.27819214e-40 6.84126923e-41\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nv = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [6.14421235e-06 7.37305482e-05 4.42383289e-04 1.76953316e-03\n  5.30859947e-03 1.27406387e-02 2.54812775e-02 4.36821900e-02\n  6.55232849e-02 8.73643799e-02 1.04837256e-01 1.14367916e-01\n  1.14367916e-01 1.05570384e-01 9.04889002e-02 7.23911201e-02\n  5.42933401e-02 3.83247107e-02 2.55498071e-02 1.61367203e-02\n  9.68203217e-03 5.53258981e-03 3.01777626e-03 1.57449196e-03\n  7.87245981e-04 3.77878071e-04 1.74405263e-04 7.75134504e-05\n  3.32200502e-05 1.37462277e-05 5.49849106e-06 2.12844815e-06\n  7.98168058e-07 2.90242930e-07 1.02438681e-07 3.51218336e-08\n  1.17072779e-08 3.79695498e-09 1.19903841e-09 3.68934897e-10\n  1.10680469e-10 3.23942836e-11 9.25550961e-12 2.58293291e-12\n  7.04436249e-13 1.87849666e-13 4.90042608e-14 1.25117262e-14\n  3.12793154e-15 7.66024051e-16 1.83845772e-16 4.32578288e-17\n  9.98257587e-18 2.26020586e-18 5.02267968e-19 1.09585738e-19\n  2.34826582e-20 4.94371753e-21 1.02283811e-21 2.08034870e-22\n  4.16069739e-23 8.18497848e-24 1.58418938e-24 3.01750359e-25\n  5.65781922e-26 1.04452047e-26 1.89912813e-27 3.40142352e-28\n  6.00251209e-29 1.04391515e-29 1.78956882e-30 3.02462336e-31\n  5.04103893e-32 8.28663934e-33 1.34377935e-33 2.15004697e-34\n  3.39481100e-35 5.29061454e-36 8.13940699e-37 1.23636562e-37\n  1.85454843e-38 2.74747915e-39 4.02070120e-40 5.81306197e-41\n  8.30437425e-42 1.17238225e-42 1.63588220e-43 2.25638925e-44\n  3.07689443e-45 4.14862170e-46 5.53149560e-47 7.29427991e-48\n  9.51427815e-49 1.22764879e-49 1.56721123e-50 1.97963523e-51\n  2.47454404e-52 3.06129160e-53 3.74852032e-54 4.54366100e-55\n  5.45239320e-56]\n [2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \np_plus = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [5.88234035e-06 7.07265069e-05 4.25258789e-04 1.70494294e-03\n  5.12758803e-03 1.23396207e-02 2.47523271e-02 4.25699598e-02\n  6.40815703e-02 8.57753007e-02 1.03372545e-01 1.13305093e-01\n  1.13900362e-01 1.05752047e-01 9.12331534e-02 7.35154380e-02\n  5.55837062e-02 3.95925379e-02 2.66651467e-02 1.70354771e-02\n  1.03545856e-02 6.00430757e-03 3.32998309e-03 1.77049933e-03\n  9.04464432e-04 4.44886358e-04 2.11130106e-04 9.68602329e-05\n  4.30388616e-05 1.85566789e-05 7.77765221e-06 3.17445959e-06\n  1.26387727e-06 4.91660939e-07 1.87166271e-07 6.98264950e-08\n  2.55633550e-08 9.19453417e-09 3.25231588e-09 1.13231285e-09\n  3.88268571e-10 1.31188629e-10 4.36913822e-11 1.43452988e-11\n  4.64375051e-12 1.48207345e-12 4.66320915e-13 1.44635287e-13\n  4.42174341e-14 1.33229666e-14 3.95605138e-15 1.15758305e-15\n  3.33779052e-16 9.48379824e-17 2.65542058e-17 7.32714094e-18\n  1.99259124e-18 5.34103000e-19 1.41124611e-19 3.67625027e-20\n  9.44257044e-21 2.39177378e-21 5.97529255e-22 1.47256275e-22\n  3.58040008e-23 8.59014712e-24 2.03399235e-24 4.75385458e-25\n  1.09687735e-25 2.49892310e-26 5.62207390e-27 1.24926407e-27\n  2.74214310e-28 5.94657811e-29 1.27422783e-29 2.69830214e-30\n  5.64750951e-31 1.16843462e-31 2.38995571e-32 4.83358132e-33\n  9.66710686e-34 1.91216667e-34 3.74118343e-35 7.24098242e-36\n  1.38656855e-36 2.62717889e-37 4.92595533e-38 9.14094100e-39\n  1.67894738e-39 3.05263030e-40 5.49473278e-41 9.79259076e-42\n  1.72810395e-42 3.01998709e-43 5.22690023e-44 8.96039975e-45\n  1.52157724e-45 2.55966254e-46 4.26610411e-47 7.04494242e-48\n  1.15280874e-48]\n [4.87670183e-05 3.53956994e-04 1.35145602e-03 3.65196520e-03\n  7.90723139e-03 1.46630914e-02 2.41976714e-02 3.63335191e-02\n  5.02872419e-02 6.46699553e-02 7.77038462e-02 8.76100694e-02\n  9.30335212e-02 9.33532479e-02 8.87815808e-02 8.02426177e-02\n  6.90970430e-02 5.68169247e-02 4.47064035e-02 3.37266124e-02\n  2.44376663e-02 1.70351971e-02 1.14419874e-02 7.41557708e-03\n  4.64366591e-03 2.81318541e-03 1.65072783e-03 9.39255362e-04\n  5.18788709e-04 2.78446939e-04 1.45367529e-04 7.38885268e-05\n  3.65989397e-05 1.76818030e-05 8.33920553e-06 3.84261228e-06\n  1.73135861e-06 7.63401064e-07 3.29657361e-07 1.39523893e-07\n  5.79207281e-08 2.36012363e-08 9.44620962e-09 3.71620170e-09\n  1.43795517e-09 5.47606352e-10 2.05365253e-10 7.58862458e-11\n  2.76440386e-11 9.93225926e-12 3.52118352e-12 1.23222137e-12\n  4.25787608e-13 1.45320179e-13 4.89995818e-14 1.63259726e-14\n  5.37596101e-15 1.74976202e-15 5.62976952e-16 1.79070303e-16\n  5.63121615e-17 1.75083287e-17 5.38226321e-18 1.63596551e-18\n  4.91679709e-19 1.46116486e-19 4.29373851e-20 1.24768092e-20\n  3.58523075e-21 1.01880873e-21 2.86318169e-22 7.95805696e-23\n  2.18771451e-23 5.94874817e-24 1.60007316e-24 4.25758493e-25\n  1.12079877e-25 2.91921397e-26 7.52337244e-27 1.91868201e-27\n  4.84254407e-28 1.20965440e-28 2.99091257e-29 7.32046551e-30\n  1.77379887e-30 4.25538608e-31 1.01083602e-31 2.37775846e-32\n  5.53908469e-33 1.27799527e-33 2.92064575e-34 6.61186547e-35\n  1.48286399e-35 3.29493694e-36 7.25432852e-37 1.58265788e-37\n  3.42177535e-38 7.33204290e-39 1.55718958e-39 3.27819214e-40\n  6.84126923e-41]\n [6.93467311e-05 4.76060417e-04 1.69818313e-03 4.24114322e-03\n  8.43331525e-03 1.43729206e-02 2.19893262e-02 3.10768764e-02\n  4.12476868e-02 5.18696760e-02 6.20780750e-02 7.08892792e-02\n  7.73806357e-02 8.08716914e-02 8.10505728e-02 7.80154763e-02\n  7.22302073e-02 6.44153368e-02 5.54086422e-02 4.60293472e-02\n  3.69725498e-02 2.87473892e-02 2.16595915e-02 1.58294937e-02\n  1.12319887e-02 7.74470845e-03 5.19371451e-03 3.39018241e-03\n  2.15561235e-03 1.33609123e-03 8.07831201e-04 4.76773988e-04\n  2.74845427e-04 1.54851131e-04 8.53190866e-05 4.59971618e-05\n  2.42777123e-05 1.25518504e-05 6.35997702e-06 3.15987149e-06\n  1.54014615e-06 7.36784378e-07 3.46104567e-07 1.59720523e-07\n  7.24426704e-08 3.23071344e-08 1.41729046e-08 6.11868712e-09\n  2.60061163e-09 1.08864402e-09 4.49015083e-10 1.82544274e-10\n  7.31764238e-11 2.89353550e-11 1.12900353e-11 4.34830142e-12\n  1.65365626e-12 6.21168569e-13 2.30538404e-13 8.45611295e-14\n  3.06625923e-14 1.09942853e-14 3.89894344e-15 1.36786300e-15\n  4.74832134e-16 1.63123968e-16 5.54684965e-17 1.86719393e-17\n  6.22305211e-18 2.05370723e-18 6.71179808e-19 2.17241752e-19\n  6.96443388e-20 2.21154788e-20 6.95666727e-21 2.16782334e-21\n  6.69245316e-22 2.04693830e-22 6.20297314e-23 1.86246277e-23\n  5.54094795e-24 1.63344777e-24 4.77163345e-25 1.38129251e-25\n  3.96257498e-26 1.12657358e-26 3.17431063e-27 8.86472521e-28\n  2.45372560e-28 6.73210866e-29 1.83088412e-29 4.93601044e-30\n  1.31922299e-30 3.49549997e-31 9.18273127e-32 2.39182234e-32\n  6.17737294e-33 1.58205043e-33 4.01793082e-34 1.01198594e-34\n  2.52790544e-35]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nw = [[array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([9.57379076e-01, 2.25289600e-02, 1.12644800e-02, 5.19899078e-03,\n       2.22813891e-03, 8.91255562e-04, 3.34220836e-04, 1.17960295e-04,\n       3.93200983e-05, 1.24168732e-05, 3.72506195e-06, 1.06430341e-06,\n       2.90264567e-07, 7.57211915e-08, 1.89302979e-08, 4.54327149e-09,\n       1.04844727e-09, 2.32988281e-10, 4.99260603e-11, 1.03295297e-11,\n       2.06590594e-12, 3.99852763e-13, 7.49723931e-14, 1.36313442e-14,\n       2.40553133e-15, 4.12376799e-16, 6.87294666e-17, 1.11453189e-17,\n       1.75978720e-18, 2.70736492e-19, 4.06104737e-20, 5.94299616e-21,\n       8.48999451e-22, 1.18465040e-22, 1.61543236e-23, 2.15390981e-24,\n       2.80944758e-25, 3.58652883e-26, 4.48316103e-27, 5.48958494e-28,\n       6.58750193e-29, 7.75000227e-30, 8.94231031e-31, 1.01233702e-31,\n       1.12481891e-32, 1.22707517e-33, 1.31472340e-34, 1.38391937e-35,\n       1.43164072e-36, 1.45590582e-37, 1.45590582e-38, 1.43203851e-39,\n       1.38584372e-40, 1.31985116e-41, 1.23736047e-42, 1.14217889e-43,\n       1.03834445e-44, 9.29860698e-46, 8.20465322e-47, 7.13448106e-48,\n       6.11526948e-49, 5.16783336e-50, 4.30652780e-51, 3.53961189e-52,\n       2.86995559e-53, 2.29596447e-54, 1.81260353e-55, 1.41241833e-56,\n       1.08647564e-57, 8.25171374e-59, 6.18878530e-60, 4.58428541e-61,\n       3.35435518e-62, 2.42483507e-63, 1.73202505e-64, 1.22260592e-65,\n       8.52980872e-67, 5.88262671e-68, 4.01088184e-69, 2.70396529e-70,\n       1.80264353e-71, 1.18855617e-72, 7.75145329e-74, 5.00093760e-75,\n       3.19208783e-76, 2.01605547e-77, 1.26003467e-78, 7.79402889e-80,\n       4.77185442e-81, 2.89203298e-82, 1.73521979e-83, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00]), array([2.37310547e-03, 1.42944765e-02, 4.30788826e-02, 8.66174018e-02,\n       1.30743507e-01, 1.58065295e-01, 1.59481117e-01, 1.38176822e-01,\n       1.04997465e-01, 7.11296466e-02, 4.35307607e-02, 2.43350499e-02,\n       1.25470426e-02, 6.01842799e-03, 2.70736867e-03, 1.15097004e-03,\n       4.65871307e-04, 1.80842695e-04, 6.77925422e-05, 2.46988229e-05,\n       8.79333477e-06, 3.07209022e-06, 1.05606619e-06, 3.57645658e-07,\n       1.19317189e-07, 3.91786586e-08, 1.26447118e-08, 4.00552376e-09,\n       1.24378045e-09, 3.78201069e-10, 1.12535389e-10, 3.27536005e-11,\n       9.32293340e-12, 2.59520051e-12, 7.06602548e-13, 1.88221260e-13,\n       4.90662284e-14, 1.25217803e-14, 3.12951983e-15, 7.66268518e-16,\n       1.83882458e-16, 4.32631997e-17, 9.98334344e-18, 2.26031300e-18,\n       5.02282584e-19, 1.09587688e-19, 2.34829126e-20, 4.94375001e-21,\n       1.02284217e-21, 2.08035367e-22, 4.16070336e-23, 8.18498550e-24,\n       1.58419019e-24, 3.01750450e-25, 5.65782024e-26, 1.04452058e-26,\n       1.89912825e-27, 3.40142364e-28, 6.00251222e-29, 1.04391516e-29,\n       1.78956884e-30, 3.02462337e-31, 5.04103895e-32, 8.28663936e-33,\n       1.34377935e-33, 2.15004697e-34, 3.39481100e-35, 5.29061454e-36,\n       8.13940699e-37, 1.23636562e-37, 1.85454843e-38, 2.74747915e-39,\n       4.02070120e-40, 5.81306197e-41, 8.30437425e-42, 1.17238225e-42,\n       1.63588220e-43, 2.25638925e-44, 3.07689443e-45, 4.14862170e-46,\n       5.53149560e-47, 7.29427991e-48, 9.51427815e-49, 1.22764879e-49,\n       1.56721123e-50, 1.97963523e-51, 2.47454404e-52, 3.06129160e-53,\n       3.74852032e-54, 4.54366100e-55, 5.45239320e-56, 6.47809093e-57,\n       7.62128344e-58, 8.87916518e-59, 1.02451906e-59, 1.17087892e-60,\n       1.32552331e-61, 1.48656820e-62, 1.65174244e-63, 1.81843205e-64,\n       1.98374405e-65])], [array([1.96740194e-02, 2.47523271e-02, 4.25699598e-02, 6.40815703e-02,\n       8.57753007e-02, 1.03372545e-01, 1.13305093e-01, 1.13900362e-01,\n       1.05752047e-01, 9.12331534e-02, 7.35154380e-02, 5.55837062e-02,\n       3.95925379e-02, 2.66651467e-02, 1.70354771e-02, 1.03545856e-02,\n       6.00430757e-03, 3.32998309e-03, 1.77049933e-03, 9.04464432e-04,\n       4.44886358e-04, 2.11130106e-04, 9.68602329e-05, 4.30388616e-05,\n       1.85566789e-05, 7.77765221e-06, 3.17445959e-06, 1.26387727e-06,\n       4.91660939e-07, 1.87166271e-07, 6.98264950e-08, 2.55633550e-08,\n       9.19453417e-09, 3.25231588e-09, 1.13231285e-09, 3.88268571e-10,\n       1.31188629e-10, 4.36913822e-11, 1.43452988e-11, 4.64375051e-12,\n       1.48207345e-12, 4.66320915e-13, 1.44635287e-13, 4.42174341e-14,\n       1.33229666e-14, 3.95605138e-15, 1.15758305e-15, 3.33779052e-16,\n       9.48379824e-17, 2.65542058e-17, 7.32714094e-18, 1.99259124e-18,\n       5.34103000e-19, 1.41124611e-19, 3.67625027e-20, 9.44257044e-21,\n       2.39177378e-21, 5.97529255e-22, 1.47256275e-22, 3.58040008e-23,\n       8.59014712e-24, 2.03399235e-24, 4.75385458e-25, 1.09687735e-25,\n       2.49892310e-26, 5.62207390e-27, 1.24926407e-27, 2.74214310e-28,\n       5.94657811e-29, 1.27422783e-29, 2.69830214e-30, 5.64750951e-31,\n       1.16843462e-31, 2.38995571e-32, 4.83358132e-33, 9.66710686e-34,\n       1.91216667e-34, 3.74118343e-35, 7.24098242e-36, 1.38656855e-36,\n       2.62717889e-37, 4.92595533e-38, 9.14094100e-39, 1.67894738e-39,\n       3.05263030e-40, 5.49473278e-41, 9.79259076e-42, 1.72810395e-42,\n       3.01998709e-43, 5.22690023e-44, 8.96039975e-45, 1.52157724e-45,\n       2.55966254e-46, 4.26610411e-47, 7.04494242e-48, 1.15280874e-48,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00])], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [], [array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])]] \new = [0.         0.         6.15466973 7.08746043 0.         0.\n 0.        ]\n\n\n\n                                                \n\n\nTo do:\n\nWhat is a sufficiently large enough vector for the service times so that after each convolution the probabilities are not truncated too early and don’t add up to 1?\nHow to implement the waiting times?"
  }
]