[
  {
    "objectID": "scratchpad.html",
    "href": "scratchpad.html",
    "title": "scratchpad",
    "section": "",
    "text": "import numpy as np\nimport functions as fn\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\n\nem = np.random.poisson(0.5, 12).astype(int)\nem_stsm = [np.random.lognormal(mean = nm, sigma=ns, size=i).sum() for i in em]\nprint(f'em: {em}, em_stsm: {em_stsm}')\n\nem: [1 0 2 1 2 0 1 0 0 0 2 0], em_stsm: [12.023706389170542, 0.0, 24.796893184360965, 24.83207042461994, 43.513619774693794, 0.0, 10.33397364453442, 0.0, 0.0, 0.0, 32.32736989488376, 0.0]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experiments",
    "section": "",
    "text": "This site contains the code experiments for my research on appointment scheduling optimization. Specifically I am working on solution methods for single stage stochastic programming problems (1-SSP) and so-called off-line scheduling system. In an off-line scheduling system all patients that want an appointment in a specific time-frame (e.g. day) are gathered first and then given an appointment time. An example of such a problem is scheduling a number of patients into a series of fixed time slots for a single physician. Each patient will have a certain service time that can not be predicted, but has some known distribution with a mean and variance. If a certain patient needs more time to consult than his time slot the next patient will start later. In case the patient finishes earlier, the doctor has idle time.\nBoth waiting times - for patient and doctor - are undesirable. The question is how to find an optimal schedule that minimizes total waiting times. Weights can be given to both types of waiting times to accommodate for different utilities of saved time for patients and doctors.\nSolution methods for these kinds of problems can be divided into two types: (1) analytical and (2) numerical. Analytical methods applies mathematical principles to a problem in order to obtain provable results. Numerical methods use sets of iterative procedures to find solutions to problems that are hard to solve by analytical methods. A numerical method is considered accurate if it finds: (1) an optimal solution in a given time or (2) a perturbed (or near-optimal) solution with a known deterministic error bound, which is a bound on the solution’s (relative or absolute) optimality gap. An inaccurate method does not produce an error bound and the quality of the solution can not be determined (Ahmadi-Javid, Jalali, and Klassen 2017).\nIdeas:\n\nApply utility function to waiting times -&gt; one minute of waiting is more acceptable than 30 minutes of waiting.\n\n\n\n\n\n\nReferences\n\nAhmadi-Javid, Amir, Zahra Jalali, and Kenneth J Klassen. 2017. “Outpatient Appointment Systems in Healthcare: A Review of Optimization Studies.” European Journal of Operational Research 258 (1): 3–34. https://doi.org/10.1016/j.ejor.2016.06.064."
  },
  {
    "objectID": "sched-sim.html",
    "href": "sched-sim.html",
    "title": "Scheduling Simulation",
    "section": "",
    "text": "Load libraries.\n\n## Libraries\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nDefine functions:\n\nlogn_mean_lns(m, s) transforms a mean and standard deviation from a lognormal distribution to parameters for a normal distribution. This is necessary when using the random lognormal sampling function. It uses a normal mean and standard deviation as inputs. However, for our simulation we define a mean and standard deviations from a lognormal distribution:\n\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an array with normal mean and standard deviation\ngenerate_logn_sts(s, n, mu, lns) generates a matrix with service times randomly selected from a lognormal distribution:\n\ns = number of rows\nn = number of columns\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an s x n matrix with random service times.\ngenerate_client(cts, sts, pct, ns=0) generates one client. A client is represented by a client type and a service time:\n\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\n\nReturns an array with client type and service time (zero when no-show).\nsimulate(iats, cts, sts, pct, ns, logs=False) simulates one schedule:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\nsimulate_crn(iats, cts, sts, logs=False) simulates one schedule using common random numbers.:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Must have same length as iats.\nsts is an array with randomly generated service times (with zeros for no-shows). Must have same length as iats.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\ntransform_iats_schedule(iats: list[int], d: int, T: int) transforms a list with inter-arrival times per client to a schedule with clients per time slot.:\n\niats is a list with interarrival times per client as integers\nd is the length of a time slot\nT is the number of intervals in the schedule\n\nReturns an array of number of clients.\ntransform_schedule_iats(schedule: list[int], d: int) transforms a schedule with clients per time slot to a list with inter-arrival times per client :\n\nschedule is a list with number of clients per time slot as integers\nd is the length of a time slot\n\nReturns an array of inter-arrival times.\n\n\n## Functions\n\n### Lognormal mean and lns / see: https://en.wikipedia.org/wiki/Log-normal_distribution\n\ndef logn_mean_lns(lnm, lns):\n  sigma = np.sqrt(np.log(1 + (lns/lnm)**2))\n  mu = np.log(lnm**2 / np.sqrt(lnm**2 + lns**2))\n  return np.array([mu, sigma])\n\n### Random lognormal service times generator\ndef generate_logn_sts(s, n, lnm, lns):\n  sts = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=s * n)\n  return np.reshape(sts, (s, n))\n\n##############\n#### TEST ####\ngenerate_logn_sts(5, 5, 14, 10)\ngenerate_logn_sts(1, 8, 14, 10)\n##############\n\n### Client generator\ndef generate_client(cts, sts, pct, ns=0):\n  ct = np.random.choice(cts, size = 1, p=pct)[0] # generate random client type\n  st = np.random.binomial(n=1, p=1-ns)*np.random.choice(sts, size = 1)[0] # generate random service time / if no-show -&gt; st = 0\n  return np.array([ct, st])\n\n### Simulation\n### ATTENTION: handling of emergency patients has not yet been implemented\n\ndef simulate(iats, cts, sts, pct, ns, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct, st = generate_client(cts, sts, pct, ns) # client type and service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef simulate_crn(iats, cts, sts, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct =  cts[i]# client type\n    st =  sts[i]# service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef transform_iats_schedule(iats: list, d: int, T: int):\n  iats = np.array(iats)\n  ats = np.cumsum(iats)\n  sats = np.arange(d*(T+1),step = d)\n  schedule = np.histogram(ats, bins=sats)\n  return schedule\n\n##############\n#### TEST ####\ntransform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)\n##############\n\ndef transform_schedule_iats(schedule: list, d: int):\n  schedule = np.array(schedule)\n  T = schedule.size\n  sats = np.arange(d*T,step = d)\n  ats = np.repeat(sats, schedule)\n  iats = np.diff(ats)\n  iats = np.insert(iats, 0, ats[0])\n  return iats\n\n##############\n#### TEST ####\nschedule = transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)[0]\ntransform_schedule_iats(schedule, d = 15)\n##############\n\narray([ 0,  0, 30,  0, 60,  0,  0,  0, 60,  0,  0,  0])\n\n\nConfigure global simulation parameters.\n\n## Variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # Percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False"
  },
  {
    "objectID": "sched-sim.html#setup",
    "href": "sched-sim.html#setup",
    "title": "Scheduling Simulation",
    "section": "",
    "text": "Load libraries.\n\n## Libraries\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nDefine functions:\n\nlogn_mean_lns(m, s) transforms a mean and standard deviation from a lognormal distribution to parameters for a normal distribution. This is necessary when using the random lognormal sampling function. It uses a normal mean and standard deviation as inputs. However, for our simulation we define a mean and standard deviations from a lognormal distribution:\n\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an array with normal mean and standard deviation\ngenerate_logn_sts(s, n, mu, lns) generates a matrix with service times randomly selected from a lognormal distribution:\n\ns = number of rows\nn = number of columns\nlnm = lognormal mean\nlns = lognormal standard deviation\n\nReturns an s x n matrix with random service times.\ngenerate_client(cts, sts, pct, ns=0) generates one client. A client is represented by a client type and a service time:\n\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\n\nReturns an array with client type and service time (zero when no-show).\nsimulate(iats, cts, sts, pct, ns, logs=False) simulates one schedule:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Used for sampling.\nsts is an array with randomly generated service times. Used for sampling.\npct is an array with distributions for samplling client types.\nns is a fraction of no-shows. When a client is a no-show the service time will be set to zero.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\nsimulate_crn(iats, cts, sts, logs=False) simulates one schedule using common random numbers.:\n\niats is an array with interarrival times for each client\ncts is an array with randomly generated client types. Must have same length as iats.\nsts is an array with randomly generated service times (with zeros for no-shows). Must have same length as iats.\nlogs a boolean flag: should results be printed (True) or not (False)?\n\nReturns an array of waiting times.\ntransform_iats_schedule(iats: list[int], d: int, T: int) transforms a list with inter-arrival times per client to a schedule with clients per time slot.:\n\niats is a list with interarrival times per client as integers\nd is the length of a time slot\nT is the number of intervals in the schedule\n\nReturns an array of number of clients.\ntransform_schedule_iats(schedule: list[int], d: int) transforms a schedule with clients per time slot to a list with inter-arrival times per client :\n\nschedule is a list with number of clients per time slot as integers\nd is the length of a time slot\n\nReturns an array of inter-arrival times.\n\n\n## Functions\n\n### Lognormal mean and lns / see: https://en.wikipedia.org/wiki/Log-normal_distribution\n\ndef logn_mean_lns(lnm, lns):\n  sigma = np.sqrt(np.log(1 + (lns/lnm)**2))\n  mu = np.log(lnm**2 / np.sqrt(lnm**2 + lns**2))\n  return np.array([mu, sigma])\n\n### Random lognormal service times generator\ndef generate_logn_sts(s, n, lnm, lns):\n  sts = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=s * n)\n  return np.reshape(sts, (s, n))\n\n##############\n#### TEST ####\ngenerate_logn_sts(5, 5, 14, 10)\ngenerate_logn_sts(1, 8, 14, 10)\n##############\n\n### Client generator\ndef generate_client(cts, sts, pct, ns=0):\n  ct = np.random.choice(cts, size = 1, p=pct)[0] # generate random client type\n  st = np.random.binomial(n=1, p=1-ns)*np.random.choice(sts, size = 1)[0] # generate random service time / if no-show -&gt; st = 0\n  return np.array([ct, st])\n\n### Simulation\n### ATTENTION: handling of emergency patients has not yet been implemented\n\ndef simulate(iats, cts, sts, pct, ns, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct, st = generate_client(cts, sts, pct, ns) # client type and service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef simulate_crn(iats, cts, sts, logs=False):\n  wt = 0 # initial value waiting time\n  wts = [] # array for saving waiting times\n  for i in range(len(iats)):\n    if(i != 0): # don't calculate waiting time for first client in schedule\n      wt = max(0, tis - iats[i]) # calculate waiting time\n    ct =  cts[i]# client type\n    st =  sts[i]# service time\n    tis = wt + st # calculate time in system\n    wts.append(wt)\n    if(logs): print(iats[i], wt, st, tis, ct)\n  return np.array(wts)\n\ndef transform_iats_schedule(iats: list, d: int, T: int):\n  iats = np.array(iats)\n  ats = np.cumsum(iats)\n  sats = np.arange(d*(T+1),step = d)\n  schedule = np.histogram(ats, bins=sats)\n  return schedule\n\n##############\n#### TEST ####\ntransform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)\n##############\n\ndef transform_schedule_iats(schedule: list, d: int):\n  schedule = np.array(schedule)\n  T = schedule.size\n  sats = np.arange(d*T,step = d)\n  ats = np.repeat(sats, schedule)\n  iats = np.diff(ats)\n  iats = np.insert(iats, 0, ats[0])\n  return iats\n\n##############\n#### TEST ####\nschedule = transform_iats_schedule([0, 0 ,30, 0, 60, 0, 0, 0, 60, 0, 0, 0], d = 15, T = 11)[0]\ntransform_schedule_iats(schedule, d = 15)\n##############\n\narray([ 0,  0, 30,  0, 60,  0,  0,  0, 60,  0,  0,  0])\n\n\nConfigure global simulation parameters.\n\n## Variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # Percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False"
  },
  {
    "objectID": "sched-sim.html#run-simulation-1",
    "href": "sched-sim.html#run-simulation-1",
    "title": "Scheduling Simulation",
    "section": "Run simulation 1",
    "text": "Run simulation 1\n\nConfigure parameters.\n\n# configure parameters\nlnm = 14 \nlns = 5\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], dtype=object) # inter-arrival times\nnsims = nsims # number of simulations\nctsm = np.random.choice(cts, size = (nsims * len(iats)), p=pct).reshape((nsims, len(iats))) # client types matrix\nstsm = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=(nsims * len(iats))).reshape((nsims, len(iats))) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = nsims * len(iats)).reshape((nsims, len(iats))) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimres = [] # array for saving simulation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n  \nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time= {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time= 3.1058995101187348')]"
  },
  {
    "objectID": "sched-sim.html#run-simulation-2",
    "href": "sched-sim.html#run-simulation-2",
    "title": "Scheduling Simulation",
    "section": "Run simulation 2",
    "text": "Run simulation 2\n\nConfigure parameters.\n\n# Configure parameters\nlnm = 14\nlns = 10\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) # inter-arrival times\nnsims = nsims # number of simulations\nctsm = np.random.choice(cts, size = (nsims * len(iats)), p=pct).reshape((nsims, len(iats))) # client types matrix\nstsm = np.random.lognormal(mean = logn_mean_lns(lnm, lns)[0], sigma=logn_mean_lns(lnm, lns)[1], size=(nsims * len(iats))).reshape((nsims, len(iats))) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = nsims * len(iats)).reshape((nsims, len(iats))) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimres = [] # array for saving silnmlation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n\nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times.\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time = {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time = 11.204205279142906')]"
  },
  {
    "objectID": "sched-sim.html#run-simulation-3",
    "href": "sched-sim.html#run-simulation-3",
    "title": "Scheduling Simulation",
    "section": "Run simulation 3",
    "text": "Run simulation 3\n\nConfigure parameters.\n\n# configure parameters\nlnm = 14\nlns = 10\nsts = generate_logn_sts(1, 1000, lnm, lns)[0] # sampling population for array service times\niats = np.array([0, 0, 0, 0, 60, 0, 0, 0, 60, 0, 0, 0]) # inter-arrival times\n\nnsims = nsims # number of simulations\nsimres = [] # array for saving simulation results\n\nRun simulations.\n\n# run simulations\nfor s in range(nsims):\n  # experiment = simulate(iats, cts, sts, pct, ns, logs=logs)\n  experiment = simulate_crn(iats, ctsm[s], stsm[s], logs=logs)\n  simres.append(experiment.mean())\n  \nmwt = np.array(simres).mean()\n\nPlot histogram of waiting times\n\n# plot histogram of waiting times\nfig = sns.histplot(simres)\nfig.set(title=f\"Mean waiting time = {mwt}\")\n\n[Text(0.5, 1.0, 'Mean waiting time = 22.804763207372968')]"
  },
  {
    "objectID": "schedule-probabilities.html",
    "href": "schedule-probabilities.html",
    "title": "Scheduling w/ Nested Partitions",
    "section": "",
    "text": "This code replicates methods from Kaandorp and Koole (2007).\n\nimport logging\nimport datetime\nimport numpy as np\nfrom scipy.stats import poisson\nfrom scipy.stats import lognorm\nfrom scipy import signal\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nimport unittest\nimport functions as fn\n\nlogging.basicConfig(filename='logs.txt', encoding='utf-8', level=logging.DEBUG)\n\n# \"\"\"\n# Function to calculate the convolution of two arrays.\n# \n# Args:\n#     a (numpy.ndarray): The first array to be convolved.\n#     b (numpy.ndarray): The second array to be convolved.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the two input arrays.\n# \"\"\"\ndef convolve(a, b):\n    \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # Compute the convolution of the two arrays.\n    for i in range(len(a)):\n        # Get subsets of array expanded to the right.\n        a_sub = a[0:i + 1].copy()\n        b_sub = b[0:i + 1].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n    \n    for i in range(1,len(a)):\n        # Get subsets of array collapse from the right.\n        a_sub = a[i:].copy()\n        b_sub = b[i:].copy()\n        # Reverse b.\n        b_rev = b_sub[::-1]\n        # Compute the dot product of a and b_rev.\n        c = np.append(c, np.dot(a_sub, b_rev))\n        \n    return c\n\n\n# \"\"\"\n# Function to convolve a distribution with itself n times.\n# \n# Args:\n#     a (numpy.ndarray): The distribution to be convolved.\n#     n (int): The number of times to convolve the distribution with itself.\n# \n# Returns:\n#     numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\ndef convolve_n(a, n):\n        \n    # Initialize an empty array to store the result.\n    c = np.array([])\n    \n    # If n is 0, return an array of zeros with length equal to the length of a, except for the first element which is 1.\n    if n == 0:\n        c = np.array(np.zeros(len(a)), dtype=np.float64)\n        c[0] = 1\n        return c\n    \n    # Convolve the distribution with itself n times.\n    for i in range(n):\n        # If this is the first iteration, set c equal to a.\n        if i == 0:\n            c = a\n        # Otherwise, convolve c with a.\n        else:\n            c = np.convolve(c, a)\n            \n    return c\n# \n# \"\"\"\n# Function to create an array of zero arrays according to a given shape array.\n# \n# Args:\n#      num_zeros (numpy.ndarray): The shape array.\n#      l (int): The length of the zeros array.\n#  \n# Returns:\n#      numpy.ndarray: The convolution of the input distribution with itself n times.\n# \"\"\"\n\ndef zero_arrays(num_zeros, l):\n    result = []\n    for n in num_zeros:\n        zeros = np.zeros(l)\n        result.append([zeros] * n)\n    return result\n\nprint(f'Zero arrays are: {zero_arrays(np.array([1, 0, 3]), 4)}')\n\ndef calc_distr_limit(l):\n    return int(max(l+4*l**0.5, 100))\n  \ndef weak_compositions(n, k):\n    if k == 1:\n        return [[n]]\n    compositions = []\n    for i in range(n + 1):\n        for composition in weak_compositions(n - i, k - 1):\n            compositions.append([i] + composition)\n    return compositions\n  \nprint(f'Weak compositions are: {weak_compositions(2, 4)}')\n\n\nclass TestConvolve(unittest.TestCase):\n    \n    def test_convolve(self):\n        a = np.array([\n            0.4456796414,\n            0.160623141,\n            0.137676978,\n            0.1032577335])\n\n        b = np.array([\n            0.006737946999,\n            0.033689735,\n            0.08422433749,\n            0.1403738958])\n\n        expected_output = np.convolve(a, b)\n        \n        self.assertTrue(np.allclose(convolve(a, b), expected_output))\n        \nif __name__ == '__main__':\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n\n\nZero arrays are: [[array([0., 0., 0., 0.])], [], [array([0., 0., 0., 0.]), array([0., 0., 0., 0.]), array([0., 0., 0., 0.])]]\nWeak compositions are: [[0, 0, 0, 2], [0, 0, 1, 1], [0, 0, 2, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 2, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 1, 0, 0], [2, 0, 0, 0]]\n\n\nA schedule with \\(T\\) intervals can have \\(T\\) states. A state of a schedule at interval \\(t\\) is defined by:\n- \\(p^-_t(i)\\), the distribution of the amount of work (\\(i\\)) left at the end of the state at interval \\(t-1\\),\n- \\(w_{tk}(i)\\), the distribution of waiting time (\\(i\\)) for a patient \\(k\\) in interval \\(t\\)\n- \\(p^+_t(i)\\), the probability of the total amount of work (\\(i\\)) in interval \\(t\\), ergo: the work left from the previous state plus all work related to arriving patients.\n\\(p^+_t(i)\\) is equal to the convolution of the distribution of waiting times of the last patient with the distribution of his service time. The iteration is as follows with K patients scheduled at interval t:\n\nStep 1: \\(w_{t0}(i) = p^-_t(i)\\) # The first patient has to wait for all the work leftover from the previous interval\n\n\nStep 2: \\(w_{t1}(i) = w_{t0}(i)*s(i)\\) # The next patient has to wait for the previous patient waiting time and service time\n\n\n. . .\n\n\nStep K: \\(p^+_t(i) = w_{t(K-1)}(i)*s(i)\\)\n\nWith \\(s(i)\\) being the distribution of individual service times.\nNB: Suggestie Joost - \\(p_N := \\sum_{i=N}^\\infty p_i\\)\n\n\"\"\"\nA schedule class with a constructor and a method to calculate the system states.\n\"\"\"\nclass Schedule:\n    def __init__(self, x, d, s):\n            # Initialize the parameters dictionary with x, d, and s.\n            self.parameters = dict({'x': x, 'd': d, 's': s})\n            logging.info(f'{datetime.datetime.now()} - x = {self.parameters[\"x\"]}')\n            # Initialize the system dictionary with p_min and v.\n            self.system = dict({\n                'p_min': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64),\n                'p_plus': np.zeros((len(self.parameters['x']), len(self.parameters['s'])), dtype=np.float64)\n            })\n            # Set the first element of p_min in the initial state to 1.\n            self.system['p_min'][0][0] = 1\n            # Initialize array of arrays for saving waiting times distributions per patient\n            self.system['w'] = zero_arrays(self.parameters['x'].copy(), len(self.parameters['s']))\n            if(self.parameters['x'][0] &gt; 0): # Only calculate waiting times if there are patients scheduled in the state\n                     self.system['w'][0][0] = self.system['p_min'][0].copy()\n                     for i in range(1, self.parameters['x'][0]):\n                            self.system['w'][0][i] = np.convolve(self.system['w'][0][i-1], self.parameters['s'])[:(len(self.parameters['s']))]\n            self.system['p_plus'][0] = self.system['p_min'][0].copy() if self.parameters['x'][0] == 0 else np.convolve(self.system['w'][0][-1], self.parameters['s'])[:(len(self.parameters['s']))]\n            # Initialize array for saving total expected waiting times per state\n            self.system['ew'] = np.zeros(len(self.parameters['x']), dtype=np.float64)\n            # Set the initial state to 1.\n            self.state = 1\n        \n    def calculate_system_states(self, until = 1):\n            \"\"\"Set state to the interval from which to start (re-)calculating waiting time distributions.\n                \"\"\"\n            \n            while self.state &lt; until:\n                logging.info(f'{datetime.datetime.now()} - State = {self.state}')\n                \n                \"\"\"The probability that the amount of work left in the system equals zero just before state t starts is the probablity that the total amount work in state t-1 was less than or equal to the interval length d.\"\"\"\n                logging.info(f'{datetime.datetime.now()} - Calculating p_min in state {self.state}')\n                self.system['p_min'][self.state][0] = np.sum(self.system['p_plus'][self.state-1][:(self.parameters['d'] + 1)])\n                \n                \"\"\"The probability that the amount of work left in the system equals i just before state t starts is the probablity that the total amount work in state t-1 exceeded the interval length d with amount i.\"\"\"\n                \n                self.system['p_min'][self.state][1:(-1*self.parameters['d'])] = self.system['p_plus'][self.state-1][(self.parameters['d'] + 1):]\n                \n                \"\"\"The distribution of waiting times of the first patient in state t equals p_min. \n                The distribution of waiting times of the second patient in state t equals the convolution of the distribution \n                of waiting times of the first patient in state t and the service time distribution. \n                The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                if(self.parameters['x'][self.state] &gt; 0): # Only calculate waiting times if there are patients scheduled in the state\n                     logging.info(f'{datetime.datetime.now()} - Calculating w[{self.state}][0] in state {self.state}')\n                     self.system['w'][self.state][0] = self.system['p_min'][self.state].copy()\n                     logging.info(f'{datetime.datetime.now()} - Done')\n                     for i in range(1, self.parameters['x'][self.state]):\n                            logging.info(f'{datetime.datetime.now()} - Calculating w[{self.state}][{i}] in state {self.state}')\n                            self.system['w'][self.state][i] = np.convolve(self.system['w'][self.state][i-1], self.parameters['s'])[:(len(self.parameters['s']))]\n\n                \n                \"\"\"The probablitity that the amount of work left in the system equals i just before state t ends equals \n                the convolution of the waiting time distribution of the last arriving patient and the service time distribution. \n                Unless there are no patients in the state t. In that case the distributio of total work just before t ends is equal \n                to the distribution of work at the beginning of t. \n                The resulting vector is truncated to the length of the service time distribution.\"\"\"\n                logging.info(f'{datetime.datetime.now()} - Calculating p_plus in state {self.state}')\n                self.system['p_plus'][self.state] = self.system['p_min'][self.state].copy() if self.parameters['x'][self.state] == 0 else np.convolve(self.system['w'][self.state][-1], self.parameters['s'])[:(len(self.parameters['s']))]\n                \"\"\"Jump to next state\"\"\"\n                self.state += 1\n    \n    def impute_compositions(self, s=1, k=2):\n      logging.info(f'{datetime.datetime.now()} - Running impute_compositions() in state {self.state}')\n      # Select the subset from the schedule for the compositions. Truncate if subset falls outside of schedule's end.\n      t = min(len(self.parameters['x']), s+k)\n      k = t - s\n      c = self.parameters['x'][s:t]\n      n = c.sum()\n      # Generate compositions\n      compositions = weak_compositions(n, k)\n      for comp in compositions:\n        # Insert composition in x\n        self.parameters['x'][s:t] = comp.copy()\n        # Set starting state\n        self.state = s\n        # Adjust the array for waiting time distributions to new x\n        self.system['w'][s:] = zero_arrays(self.parameters['x'][s:].copy(), len(self.parameters['s']))\n        # Recalculate dsitributions\n        logging.info(f'{datetime.datetime.now()} - Calculating distributions in state {self.state} with x = {self.parameters[\"x\"]}')\n        self.calculate_system_states(until=len(self.parameters['x']))\n        \n    \n    def calculate_wait_times(self):\n    # Initialize time counter\n      t = 0\n      # Calculate the expected waiting time for each time step\n      for t, w in enumerate(self.system['w']):\n          ew = 0\n          for i in w:\n              # Calculate the weighted sum of the waiting time distribution\n              a = range(len(i))\n              b = i\n              wt = np.dot(a, b)\n              ew += wt\n          # Store the expected waiting time for the current time step\n          self.system['ew'][t] = ew\n        \n        \n    def visualize_state(self, state='', dist='p_plus'):\n        \"\"\"\n        Visualize a distribution in the last given state.\n        \"\"\"\n        if state == '':\n            state = self.state\n        trace = go.Scatter(\n            x=list(range(len(self.system[dist][state]))),\n            y=self.system[dist][state],\n            mode='lines'\n        )\n        \n        data = [trace]\n        \n        layout = go.Layout(\n            title=f'{dist} in state {state} with x = {self.parameters[\"x\"]}&lt;br&gt;&lt;sub&gt;AUR = {np.round(np.sum(self.system[dist][state]), 3)}&lt;/sub&gt;',\n            xaxis=dict(title='Time'),\n            yaxis=dict(title='Probability')\n        )\n        \n        fig = go.Figure(data=data, layout=layout)\n        pyo.iplot(fig)\n    \n    def visualize_system(self, dist='p_plus'):\n         \n         values = self.system[dist]\n         trace = go.Heatmap(\n                    z=values,\n                    text=np.around(values, 2),\n                    texttemplate=\"%{text}\",\n                    textfont={\"size\":10}\n                    )\n         data = [trace]\n\n         layout = go.Layout(\n            title=f'{dist} with x = {self.parameters[\"x\"]}',\n            xaxis=dict(title='Time'),\n            yaxis=dict(title='Interval')\n        )\n         fig = go.Figure(data=data, layout=layout)\n         pyo.iplot(fig)\n        \n    def __str__(self):\n        \"\"\"\n        Print all probabilities\n        \"\"\"\n        return(\"p_min = % s \\nw = % s \\np_plus = % s \\new = % s\" % (self.system['p_min'], self.system['w'], self.system['p_plus'], self.system['ew']))\n\nThe code above defines a Schedule class that is used to calculate the probability distributions of the amount of work in a system at different states. The class has a constructor that takes three parameters x, d, and s, which represent the number of clients scheduled, the interval length, and the service time distribution, respectively.\nThe constructor initializes the parameters dictionary with the input parameters, and the system dictionary with two NumPy arrays p_min and p_plus. The p_min array represents the probability distribution of the amount of work in the system just before a state starts, and the p_plus array represents the probability distribution of the total amount of work in the system until a state ends. The constructor also initializes the state variable to 0, and sets the first element of p_min in the initial state to 1. Additionally, the constructor initializes an array of arrays for saving waiting times distributions per patient, w, and an array for saving total expected waiting times per state, ew.\nThe Schedule class has two methods calculate_system_states and calculate_wait_times. The calculate_system_states method calculates the probability distributions of the amount of work in the system at different states. The method uses a while loop to iterate over the states, starting from state 1. For each state, the method calculates the probability distribution of the amount of work in the system just before the state starts (p_min), and the probability distribution of the amount of work in the system just after the state ends (p_plus). The method also calculates the waiting time distribution of the patients in the state (w). The calculate_wait_times method calculates the expected waiting time for each time step.\nThe Schedule class also has a visualize_p_plus method that visualizes the p_plus array in the last calculated state. The method uses the Plotly library to create a scatter plot of the p_plus array.\nFinally, the Schedule class has a __str__ method that returns a string representation of the p_min, w, p_plus, and ew arrays.\nTo improve the readability of the code, the Schedule class could be refactored to use more descriptive variable names. Additionally, the calculate_system_states method could be split into smaller methods to improve its readability and maintainability. Finally, the visualize_p_plus method could be modified to take a state parameter, allowing the user to visualize the p_plus array for any state.\n\ndef run_schedule(x, d, s, u=1, print_system=True):\n  schedule = Schedule(x=x, d=d, s=s)\n  schedule.calculate_system_states(until=u)\n  schedule.calculate_wait_times()\n  if(print_system): print(schedule)\n  print(f\"Expected wt per state: {schedule.system['ew']}\")\n  schedule.impute_compositions(s=1, k=2)\n  return(schedule)\n\n\n\"\"\"Simple test case\"\"\"\n\nx = np.array([2, 0, 3, 1, 1], dtype=np.int64)\nd = 3\ns=np.array(\n    [0.1, 0.2, 0.3, 0.2, 0.15, 0.05, 0, 0, 0, 0, 0, 0, 0, 0], dtype=np.float64)\nindices = np.arange(s.size)\nexp_s = (indices * s).sum()\nprint(f'exp_s = {exp_s}')\nu = 4\nsch = run_schedule(x, d, s, u, False)\nsch.visualize_system('p_min')\n\nexp_s = 2.25\nExpected wt per state: [2.25       0.         7.4399125  3.97027875 0.        ]\n\n\n\n                                                \n\n\n\n\"\"\"Test case with validation in spreadsheet\nurl: https://docs.google.com/spreadsheets/d/1_l9bMqEfLT2-TpZz3MrDFIid30ZsywTVH8Lzc5uHrGw/edit?usp=sharing\"\"\"\nx = np.array([1, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = len(x)\n  \nsch = run_schedule(x, d, s, u, True)\n\nsch.visualize_system('p_min')\nsch.visualize_state(1, 'p_min')\n\np_min = [[1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]\n [4.45679641e-01 1.60623141e-01 1.37676978e-01 1.03257734e-01\n  6.88384890e-02 4.13030934e-02 2.25289600e-02 1.12644800e-02\n  5.19899078e-03 2.22813891e-03 8.91255562e-04 3.34220836e-04\n  1.17960295e-04 3.93200983e-05 1.24168732e-05 3.72506195e-06\n  1.06430341e-06 2.90264567e-07 7.57211915e-08 1.89302979e-08\n  4.54327149e-09 1.04844727e-09 2.32988281e-10 4.99260603e-11\n  1.03295297e-11 2.06590594e-12 3.99852763e-13 7.49723931e-14\n  1.36313442e-14 2.40553133e-15 4.12376799e-16 6.87294666e-17\n  1.11453189e-17 1.75978720e-18 2.70736492e-19 4.06104737e-20\n  5.94299616e-21 8.48999451e-22 1.18465040e-22 1.61543236e-23\n  2.15390981e-24 2.80944758e-25 3.58652883e-26 4.48316103e-27\n  5.48958494e-28 6.58750193e-29 7.75000227e-30 8.94231031e-31\n  1.01233702e-31 1.12481891e-32 1.22707517e-33 1.31472340e-34\n  1.38391937e-35 1.43164072e-36 1.45590582e-37 1.45590582e-38\n  1.43203851e-39 1.38584372e-40 1.31985116e-41 1.23736047e-42\n  1.14217889e-43 1.03834445e-44 9.29860698e-46 8.20465322e-47\n  7.13448106e-48 6.11526948e-49 5.16783336e-50 4.30652780e-51\n  3.53961189e-52 2.86995559e-53 2.29596447e-54 1.81260353e-55\n  1.41241833e-56 1.08647564e-57 8.25171374e-59 6.18878530e-60\n  4.58428541e-61 3.35435518e-62 2.42483507e-63 1.73202505e-64\n  1.22260592e-65 8.52980872e-67 5.88262671e-68 4.01088184e-69\n  2.70396529e-70 1.80264353e-71 1.18855617e-72 7.75145329e-74\n  5.00093760e-75 3.19208783e-76 2.01605547e-77 1.26003467e-78\n  7.79402889e-80 4.77185442e-81 2.89203298e-82 1.73521979e-83\n  0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n  0.00000000e+00]] \nw = [[array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])], [array([4.45679641e-01, 1.60623141e-01, 1.37676978e-01, 1.03257734e-01,\n       6.88384890e-02, 4.13030934e-02, 2.25289600e-02, 1.12644800e-02,\n       5.19899078e-03, 2.22813891e-03, 8.91255562e-04, 3.34220836e-04,\n       1.17960295e-04, 3.93200983e-05, 1.24168732e-05, 3.72506195e-06,\n       1.06430341e-06, 2.90264567e-07, 7.57211915e-08, 1.89302979e-08,\n       4.54327149e-09, 1.04844727e-09, 2.32988281e-10, 4.99260603e-11,\n       1.03295297e-11, 2.06590594e-12, 3.99852763e-13, 7.49723931e-14,\n       1.36313442e-14, 2.40553133e-15, 4.12376799e-16, 6.87294666e-17,\n       1.11453189e-17, 1.75978720e-18, 2.70736492e-19, 4.06104737e-20,\n       5.94299616e-21, 8.48999451e-22, 1.18465040e-22, 1.61543236e-23,\n       2.15390981e-24, 2.80944758e-25, 3.58652883e-26, 4.48316103e-27,\n       5.48958494e-28, 6.58750193e-29, 7.75000227e-30, 8.94231031e-31,\n       1.01233702e-31, 1.12481891e-32, 1.22707517e-33, 1.31472340e-34,\n       1.38391937e-35, 1.43164072e-36, 1.45590582e-37, 1.45590582e-38,\n       1.43203851e-39, 1.38584372e-40, 1.31985116e-41, 1.23736047e-42,\n       1.14217889e-43, 1.03834445e-44, 9.29860698e-46, 8.20465322e-47,\n       7.13448106e-48, 6.11526948e-49, 5.16783336e-50, 4.30652780e-51,\n       3.53961189e-52, 2.86995559e-53, 2.29596447e-54, 1.81260353e-55,\n       1.41241833e-56, 1.08647564e-57, 8.25171374e-59, 6.18878530e-60,\n       4.58428541e-61, 3.35435518e-62, 2.42483507e-63, 1.73202505e-64,\n       1.22260592e-65, 8.52980872e-67, 5.88262671e-68, 4.01088184e-69,\n       2.70396529e-70, 1.80264353e-71, 1.18855617e-72, 7.75145329e-74,\n       5.00093760e-75, 3.19208783e-76, 2.01605547e-77, 1.26003467e-78,\n       7.79402889e-80, 4.77185442e-81, 2.89203298e-82, 1.73521979e-83,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00])]] \np_plus = [[2.47875218e-03 1.48725131e-02 4.46175392e-02 8.92350784e-02\n  1.33852618e-01 1.60623141e-01 1.60623141e-01 1.37676978e-01\n  1.03257734e-01 6.88384890e-02 4.13030934e-02 2.25289600e-02\n  1.12644800e-02 5.19899078e-03 2.22813891e-03 8.91255562e-04\n  3.34220836e-04 1.17960295e-04 3.93200983e-05 1.24168732e-05\n  3.72506195e-06 1.06430341e-06 2.90264567e-07 7.57211915e-08\n  1.89302979e-08 4.54327149e-09 1.04844727e-09 2.32988281e-10\n  4.99260603e-11 1.03295297e-11 2.06590594e-12 3.99852763e-13\n  7.49723931e-14 1.36313442e-14 2.40553133e-15 4.12376799e-16\n  6.87294666e-17 1.11453189e-17 1.75978720e-18 2.70736492e-19\n  4.06104737e-20 5.94299616e-21 8.48999451e-22 1.18465040e-22\n  1.61543236e-23 2.15390981e-24 2.80944758e-25 3.58652883e-26\n  4.48316103e-27 5.48958494e-28 6.58750193e-29 7.75000227e-30\n  8.94231031e-31 1.01233702e-31 1.12481891e-32 1.22707517e-33\n  1.31472340e-34 1.38391937e-35 1.43164072e-36 1.45590582e-37\n  1.45590582e-38 1.43203851e-39 1.38584372e-40 1.31985116e-41\n  1.23736047e-42 1.14217889e-43 1.03834445e-44 9.29860698e-46\n  8.20465322e-47 7.13448106e-48 6.11526948e-49 5.16783336e-50\n  4.30652780e-51 3.53961189e-52 2.86995559e-53 2.29596447e-54\n  1.81260353e-55 1.41241833e-56 1.08647564e-57 8.25171374e-59\n  6.18878530e-60 4.58428541e-61 3.35435518e-62 2.42483507e-63\n  1.73202505e-64 1.22260592e-65 8.52980872e-67 5.88262671e-68\n  4.01088184e-69 2.70396529e-70 1.80264353e-71 1.18855617e-72\n  7.75145329e-74 5.00093760e-75 3.19208783e-76 2.01605547e-77\n  1.26003467e-78 7.79402889e-80 4.77185442e-81 2.89203298e-82\n  1.73521979e-83]\n [1.10472938e-03 7.02652125e-03 2.26152657e-02 4.92404200e-02\n  8.18377487e-02 1.11105195e-01 1.28770422e-01 1.31443681e-01\n  1.20919170e-01 1.01987420e-01 7.98767750e-02 5.86301564e-02\n  4.05959685e-02 2.66372758e-02 1.66168660e-02 9.87887956e-03\n  5.60795156e-03 3.04484774e-03 1.58365398e-03 7.90177785e-04\n  3.78767891e-04 1.74662126e-04 7.75841486e-05 3.32386453e-05\n  1.37509110e-05 5.49962264e-06 2.12871089e-06 7.98226770e-07\n  2.90255576e-07 1.02441310e-07 3.51223616e-08 1.17073805e-08\n  3.79697429e-09 1.19904194e-09 3.68935521e-10 1.10680576e-10\n  3.23943016e-11 9.25551252e-12 2.58293337e-12 7.04436320e-13\n  1.87849677e-13 4.90042624e-14 1.25117264e-14 3.12793157e-15\n  7.66024055e-16 1.83845773e-16 4.32578288e-17 9.98257588e-18\n  2.26020586e-18 5.02267968e-19 1.09585739e-19 2.34826583e-20\n  4.94371753e-21 1.02283811e-21 2.08034870e-22 4.16069739e-23\n  8.18497848e-24 1.58418938e-24 3.01750359e-25 5.65781922e-26\n  1.04452047e-26 1.89912813e-27 3.40142352e-28 6.00251209e-29\n  1.04391515e-29 1.78956882e-30 3.02462336e-31 5.04103893e-32\n  8.28663934e-33 1.34377935e-33 2.15004697e-34 3.39481100e-35\n  5.29061454e-36 8.13940699e-37 1.23636562e-37 1.85454843e-38\n  2.74747915e-39 4.02070120e-40 5.81306197e-41 8.30437425e-42\n  1.17238225e-42 1.63588220e-43 2.25638925e-44 3.07689443e-45\n  4.14862170e-46 5.53149560e-47 7.29427991e-48 9.51427815e-49\n  1.22764879e-49 1.56721123e-50 1.97963523e-51 2.47454404e-52\n  3.06129160e-53 3.74852032e-54 4.54366100e-55 5.45239320e-56\n  6.47809093e-57 7.62128344e-58 8.87916518e-59 1.02451906e-59\n  1.17087892e-60]] \new = [0.        1.5180592]\nExpected wt per state: [0.        1.5180592]\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\"\"\"Test case with more than 1 clients in the system in the same interval\"\"\"\nx = np.array([1, 0, 2, 0, 1, 1, 1], dtype=np.int64)\nd = 5\nl = 6\nlimit = calc_distr_limit(l * x.sum())+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = 4\n  \nsch = run_schedule(x, d, s, u, False)\n\nExpected wt per state: [0.         0.         6.15466973 0.         0.         0.\n 0.        ]\n\n\n\nsch.visualize_state(2)\n\n\n                                                \n\n\n\nsch.visualize_system(dist='p_min')\n\n\n                                                \n\n\n\nsch.visualize_system('p_plus')\n\n\n                                                \n\n\n\nT = 24 # number of intervals\nx = np.zeros(T) \nt = np.arange(T, step=2)\nx[t] = 1\nx[-1] = 1\nx[0] = 2 \nx = x.astype(int) # initial schedule\nprint(f'Initial schedule: {x}')\nN = np.sum(x)\nd = 10\nl = 20\nlimit = calc_distr_limit(l * N)+1\nservice_times = range(0, limit)\ns = np.array([poisson.pmf(i, l) for i in service_times], dtype=np.float64)\nu = T\nsch = run_schedule(x, d, s, u, False)\nsch.visualize_system('p_plus')\n\nInitial schedule: [2 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1]\nExpected wt per state: [20.          0.         20.0003139   0.         20.00654104  0.\n 20.02974938  0.         20.07680883  0.         20.14909919  0.\n 20.24496897  0.         20.36160607  0.         20.49598958  0.\n 20.64529634  0.         20.8070411   0.         20.97909812 30.97970595]\n\n\n\n                                                \n\n\n\n\n\n\nReferences\n\nKaandorp, Guido C., and Ger Koole. 2007. “Optimal Outpatient Appointment Scheduling.” Health Care Management Science 10 (3): 217–29. https://doi.org/10.1007/s10729-007-9015-x."
  },
  {
    "objectID": "sim-based-opt.html",
    "href": "sim-based-opt.html",
    "title": "Simulation Based Optimization",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 15 # interval time\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for array service"
  },
  {
    "objectID": "sim-based-opt.html#setup",
    "href": "sim-based-opt.html#setup",
    "title": "Simulation Based Optimization",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nns = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 15 # interval time\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for array service"
  },
  {
    "objectID": "sim-based-opt.html#run-simulations",
    "href": "sim-based-opt.html#run-simulations",
    "title": "Simulation Based Optimization",
    "section": "Run simulations",
    "text": "Run simulations\n\n# Simulation 1\n\ntic = time.time()\nsim = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nN = len(iats) # number of patients\n# T = len(sim) # number of intervals\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\nsimreswt = []\nsimresln = 0\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = loss = 0.5 * mwt + 0.5 * mln\ntoc = time.time()\nprint(toc - tic)\n# plots\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\n1.6704800128936768\n\n\nText(0.5, 1.0, 'schedule: [1 1 1 1 1 1 1 1 1 1 1 1], mwt: 1.6152588082577335, mln: 1.9816567005293473, loss: 1.7984577543935405')\n\n\n\n\n\n\n\n\n\n# Simulation 2\n\nsim = np.array([2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plot histogram of waiting times\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [2 0 1 1 1 1 1 1 1 1 1 1], mwt: 2.2019265777580403, mln: 1.978408250817367, loss: 2.090167414287704')\n\n\n\n\n\n\n\n\n\n# Simulation 3\n\nsim = np.array([1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plot histogram of waiting times\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [1 1 1 2 0 1 1 1 1 1 1 1], mwt: 2.283471166015693, mln: 1.9728496992918412, loss: 2.1281604326537673')\n\n\n\n\n\n\n\n\n\n# Simulation 4\n\nsim = np.array([1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1]) # initial schedule\niats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times\niats_d = np.diff(iats)\nsimreswt = []\nsimresln = 0\n\n\nfor i in range(nsims):\n  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n  simreswt.append(experiment[0].mean())\n  ln = max(0, (experiment[1] - d))\n  simresln += ln\n  \n\nmwt = np.array(simreswt).mean()\nmln = simresln / nsims\nloss = 0.5 * mwt + 0.5 * mln\n\n# plots\n\nfig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)\naxs1.plot(iats, label=\"iats\")\naxs1.set_title(f'iats: {iats}')\naxs2.plot(iats_d, label=\"iats_d\")\naxs2.set_title(f'iats_d: {iats_d}')\nfig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)\naxs3.hist(simreswt, bins = 300)\naxs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')\n\nText(0.5, 1.0, 'schedule: [1 1 1 1 1 2 0 1 1 1 1 1], mwt: 2.2961865419347536, mln: 1.9569732799329085, loss: 2.126579910933831')"
  },
  {
    "objectID": "search-function.html",
    "href": "search-function.html",
    "title": "Search Function",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nnsh = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 12 # number of intervals\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = np.zeros(T) \ni = np.arange(T, step=2)\nsim[i] = 1\nsim[-1] = 1\nsim[0] = 2 \nsim = sim.astype(int) # initial schedule\nN = np.sum(sim)\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows"
  },
  {
    "objectID": "search-function.html#setup",
    "href": "search-function.html#setup",
    "title": "Search Function",
    "section": "",
    "text": "See “Scheduling Simulation” for all function descriptions.\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport time\nimport functions as fn\n\nConfigure global simulation parameters.\n\n## Global variables\n\ncts = np.array([0, 1]) # client types -&gt; normal or emergency\npct = np.array([1, 0]) # distribution of client types -&gt; normal or emergency\n# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing\n# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution\n\nnsh = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 14 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 12 # number of intervals\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = np.zeros(T) \ni = np.arange(T, step=2)\nsim[i] = 1\nsim[-1] = 1\nsim[0] = 2 \nsim = sim.astype(int) # initial schedule\nN = np.sum(sim)\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows"
  },
  {
    "objectID": "search-function.html#run-simulations-and-search",
    "href": "search-function.html#run-simulations-and-search",
    "title": "Search Function",
    "section": "Run simulations and search",
    "text": "Run simulations and search\n\nprint(f'Running {nsims} simulations with {N} patients and {T} timeslots.')\n\n# Get start time and set timer seconds\nstart_time = time.time()\nseconds = 30\nbestresult = {\n          'schedule': None,\n          'iats': None,\n          'iats_diff': None,\n          'loss': None,\n          'calc_time': None\n          } # Dictionary for saving best result\n\n# Start timer while loop\nwhile True:\n    current_time = time.time()\n    elapsed_time = current_time - start_time\n    \n    if elapsed_time &gt; seconds:\n        print(f\"Finished iterating in: {str(int(elapsed_time))} seconds\\n\")\n        print(f\"Best result:\\nschedule: {bestresult['schedule']},\\niats: {bestresult['iats']},\\niats_diff: {bestresult['iats_diff']},\\nloss = {bestresult['loss']}, calc time: {bestresult['calc_time']} secs\\n\")\n        break\n      \n    \n    ## data preparation\n    psm = fn.patient_shift_matrix(sim).astype(int)\n    print(\"Generated new psm\\n\")\n    transf_to_iats = lambda x: fn.transform_schedule_iats(x, d) \n    iats_sm = np.apply_along_axis(transf_to_iats, 1, psm) # iats shifting matrix\n    iats_d_sm = np.diff(iats_sm) # first derivative iats shifting matrix\n    \n    ## Start iterator for inter arrival times in shift matrix\n    results = [] # start list for saving results\n    for iats in iats_sm:\n      tic = time.time()\n      simreswt = [None] * nsims # array for saving waiting times\n      simresln = 0 # array for saving lateness\n      \n      for i in range(nsims): # simulate nsims number of times\n        experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n        simreswt[i] = experiment[0].mean()\n        ln = max(0, (experiment[1] - d))\n        simresln += ln\n        \n      mwt = np.array(simreswt).mean()\n      mln = simresln / nsims\n      loss = 0.5 * mwt + 0.5 * mln\n      toc = time.time()\n      result = {\n          'schedule': fn.transform_iats_schedule(iats, d, T)[0],\n          'iats': iats,\n          'iats_diff': np.diff(iats),\n          'loss': loss,\n          'calc_time': toc - tic\n        }\n      if bestresult['loss'] == None: # save first result as bestresult\n            bestresult = result\n      if result['loss'] &lt; bestresult['loss']: # break loop on first improvement of loss value\n            sim = result['schedule'] # assign current best schedule as new starting point for search\n            bestresult = result\n            print(f\"\\n#### Found better schedule: {result['schedule']} with loss: {result['loss']}\\n\")\n            break\n      \n      results.append(result)\n      print(f\"schedule: {result['schedule']},\\niats: {result['iats']},\\niats_diff: {result['iats_diff']},\\nloss = {result['loss']}, calc time: {result['calc_time']} secs\\n\")\n\nRunning 100000 simulations with 8 patients and 12 timeslots.\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 0 1 0 1 1],\niats: [ 0  0 20 20 20 20 20 10],\niats_diff: [  0  20   0   0   0   0 -10],\nloss = 3.6476960812463117, calc time: 1.306283950805664 secs\n\nschedule: [1 0 1 0 1 0 1 0 1 0 1 2],\niats: [ 0 20 20 20 20 20 10  0],\niats_diff: [ 20   0   0   0   0 -10 -10],\nloss = 7.224373123646303, calc time: 1.2739603519439697 secs\n\nschedule: [2 1 0 0 1 0 1 0 1 0 1 1],\niats: [ 0  0 10 30 20 20 20 10],\niats_diff: [  0  10  20 -10   0   0 -10],\nloss = 4.008420295613417, calc time: 1.2821869850158691 secs\n\nschedule: [2 0 1 1 0 0 1 0 1 0 1 1],\niats: [ 0  0 20 10 30 20 20 10],\niats_diff: [  0  20 -10  20 -10   0 -10],\nloss = 3.8798654372888883, calc time: 1.273777961730957 secs\n\nschedule: [2 0 1 0 1 1 0 0 1 0 1 1],\niats: [ 0  0 20 20 10 30 20 10],\niats_diff: [  0  20   0 -10  20 -10 -10],\nloss = 3.8155709195691663, calc time: 1.2823998928070068 secs\n\nschedule: [2 0 1 0 1 0 1 1 0 0 1 1],\niats: [ 0  0 20 20 20 10 30 10],\niats_diff: [  0  20   0   0 -10  20 -20],\nloss = 3.754334300171685, calc time: 1.2803819179534912 secs\n\n\n#### Found better schedule: [2 0 1 0 1 0 1 0 1 1 0 1] with loss: 3.032278504991844\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 0 1 1 0 1],\niats: [ 0  0 20 20 20 20 10 20],\niats_diff: [  0  20   0   0   0 -10  10],\nloss = 3.032278504991844, calc time: 1.3382089138031006 secs\n\nschedule: [1 0 1 0 1 0 1 0 1 1 0 2],\niats: [ 0 20 20 20 20 10 20  0],\niats_diff: [ 20   0   0   0 -10  10 -20],\nloss = 6.266561985226899, calc time: 1.289640188217163 secs\n\nschedule: [2 1 0 0 1 0 1 0 1 1 0 1],\niats: [ 0  0 10 30 20 20 10 20],\niats_diff: [  0  10  20 -10   0 -10  10],\nloss = 3.3925263533882957, calc time: 1.2986118793487549 secs\n\nschedule: [2 0 1 1 0 0 1 0 1 1 0 1],\niats: [ 0  0 20 10 30 20 10 20],\niats_diff: [  0  20 -10  20 -10 -10  10],\nloss = 3.2620766943657946, calc time: 1.2968850135803223 secs\n\nschedule: [2 0 1 0 1 1 0 0 1 1 0 1],\niats: [ 0  0 20 20 10 30 10 20],\niats_diff: [  0  20   0 -10  20 -20  10],\nloss = 3.185804115453161, calc time: 1.2905209064483643 secs\n\n\n#### Found better schedule: [2 0 1 0 1 0 1 1 0 1 0 1] with loss: 2.8991167958767052\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 0 1 1 0 1 0 1],\niats: [ 0  0 20 20 20 10 20 20],\niats_diff: [  0  20   0   0 -10  10   0],\nloss = 2.8991167958767052, calc time: 1.2858572006225586 secs\n\nschedule: [1 0 1 0 1 0 1 1 0 1 0 2],\niats: [ 0 20 20 20 10 20 20  0],\niats_diff: [ 20   0   0 -10  10   0 -20],\nloss = 6.03194036068306, calc time: 1.2802150249481201 secs\n\nschedule: [2 1 0 0 1 0 1 1 0 1 0 1],\niats: [ 0  0 10 30 20 10 20 20],\niats_diff: [  0  10  20 -10 -10  10   0],\nloss = 3.258340342790724, calc time: 1.269395351409912 secs\n\nschedule: [2 0 1 1 0 0 1 1 0 1 0 1],\niats: [ 0  0 20 10 30 10 20 20],\niats_diff: [  0  20 -10  20 -20  10   0],\nloss = 3.1204278305271904, calc time: 1.2748777866363525 secs\n\n\n#### Found better schedule: [2 0 1 0 1 1 0 1 0 1 0 1] with loss: 2.8949253655816305\n\nGenerated new psm\n\nschedule: [2 0 1 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 20 20 10 20 20 20],\niats_diff: [  0  20   0 -10  10   0   0],\nloss = 2.8949253655816305, calc time: 1.3170711994171143 secs\n\nschedule: [1 0 1 0 1 1 0 1 0 1 0 2],\niats: [ 0 20 20 10 20 20 20  0],\niats_diff: [ 20   0 -10  10   0   0 -20],\nloss = 5.965333245691008, calc time: 1.2795460224151611 secs\n\nschedule: [2 1 0 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 10 30 10 20 20 20],\niats_diff: [  0  10  20 -20  10   0   0],\nloss = 3.249287387675099, calc time: 1.2755272388458252 secs\n\nschedule: [2 0 1 1 0 1 0 1 0 1 0 1],\niats: [ 0  0 20 10 20 20 20 20],\niats_diff: [  0  20 -10  10   0   0   0],\nloss = 2.992001694361734, calc time: 1.2839202880859375 secs\n\nschedule: [2 0 1 0 2 0 0 1 0 1 0 1],\niats: [ 0  0 20 20  0 30 20 20],\niats_diff: [  0  20   0 -20  30 -10   0],\nloss = 3.3076807611052983, calc time: 1.2854900360107422 secs\n\nschedule: [2 0 1 0 1 1 1 0 0 1 0 1],\niats: [ 0  0 20 20 10 10 30 20],\niats_diff: [  0  20   0 -10   0  20 -10],\nloss = 3.1254377484593965, calc time: 1.2767889499664307 secs\n\nschedule: [2 0 1 0 1 1 0 1 1 0 0 1],\niats: [ 0  0 20 20 10 20 10 30],\niats_diff: [  0  20   0 -10  10 -10  20],\nloss = 3.0117200219436313, calc time: 1.274200677871704 secs\n\nschedule: [2 0 1 0 1 1 0 1 0 1 1 0],\niats: [ 0  0 20 20 10 20 20 10],\niats_diff: [  0  20   0 -10  10   0 -10],\nloss = 4.025159718619978, calc time: 1.284684181213379 secs\n\nFinished iterating in: 33 seconds\n\nBest result:\nschedule: [2 0 1 0 1 1 0 1 0 1 0 1],\niats: [ 0  0 20 20 10 20 20 20],\niats_diff: [  0  20   0 -10  10   0   0],\nloss = 2.8949253655816305, calc time: 1.2784531116485596 secs\n\n\n\n\ndef distribute_elements(n, t):\n    quotient, remainder = divmod(t, n-1)\n    elements = np.zeros(t)\n    for i in range(n-1):\n        elements[i * quotient] = 1\n    elements[0] = elements[0] + 1\n    return elements\n  \n\nnsh = 0.1 # percentage of no-shows\nnsims = 100000 # number of simulations\nlogs = False # do not print simulation logs\nlnm = 20 # lognormal mean\nlns = 5 # lognormal standard deviation\nnm = fn.logn_mean_lns(lnm, lns)[0] # normal mean\nns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation\nd = 10 # interval time\nT = 24 # number of intervals\nN = 9 # number of patients\nsts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for service times\nsim = distribute_elements(N, T)\nsim = sim.astype(int) # initial schedule\n\nctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix\nstsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix\nnsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix\nstsm = stsm * nsm # service times matrix with no-shows\n\n\nprint(f'Running {nsims} simulations with {N} patients and {T} timeslots.')\n\n# Get start time and set timer seconds\nstart_time = time.time()\nseconds = 300\nbestresult = {\n          'schedule': None,\n          'iats': None,\n          'iats_diff': None,\n          'loss': None,\n          'calc_time': None\n          } # Dictionary for saving best result\n\n# Start timer while loop\nwhile True:\n    current_time = time.time()\n    elapsed_time = current_time - start_time\n    \n    if elapsed_time &gt; seconds:\n        print(f\"Finished iterating in: {str(int(elapsed_time))} seconds\\n\")\n        print(f\"Best result:\\nschedule: {bestresult['schedule']},\\niats: {bestresult['iats']},\\niats_diff: {bestresult['iats_diff']},\\nloss = {bestresult['loss']}, calc time: {bestresult['calc_time']} secs\\n\")\n        break\n      \n    \n    ## data preparation\n    psm = fn.patient_shift_matrix(sim).astype(int)\n    print(\"Generated new psm\\n\")\n    transf_to_iats = lambda x: fn.transform_schedule_iats(x, d) \n    iats_sm = np.apply_along_axis(transf_to_iats, 1, psm) # iats shifting matrix\n    iats_d_sm = np.diff(iats_sm) # first derivative iats shifting matrix\n    \n    ## Start iterator for inter arrival times in shift matrix\n    results = [] # start list for saving results\n    for iats in iats_sm:\n      tic = time.time()\n      simreswt = [None] * nsims # array for saving waiting times\n      simresln = 0 # array for saving lateness\n      \n      for i in range(nsims): # simulate nsims number of times\n        experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)\n        simreswt[i] = experiment[0].mean()\n        ln = max(0, (experiment[1] - d))\n        simresln += ln\n        \n      mwt = np.array(simreswt).mean()\n      mln = simresln / nsims\n      loss = 0.5 * mwt + 0.5 * mln\n      toc = time.time()\n      result = {\n          'schedule': fn.transform_iats_schedule(iats, d, T)[0],\n          'iats': iats,\n          'iats_diff': np.diff(iats),\n          'loss': loss,\n          'calc_time': toc - tic\n        }\n      if bestresult['loss'] == None: # save first result as bestresult\n            bestresult = result\n      if result['loss'] &lt; bestresult['loss']: # break loop on first improvement of loss value\n            sim = result['schedule'] # assign current best schedule as new starting point for search\n            bestresult = result\n            print(f\"\\n#### Found better schedule: {result['schedule']} with loss: {result['loss']}\\n\")\n            break\n      \n      results.append(result)\n      print(f\"schedule: {result['schedule']},\\niats: {result['iats']},\\niats_diff: {result['iats_diff']},\\nloss = {result['loss']}, calc time: {result['calc_time']} secs\\n\")\n\nRunning 100000 simulations with 9 patients and 24 timeslots.\nGenerated new psm\n\nschedule: [2 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0],\niats: [ 0  0 30 30 30 30 30 30 30],\niats_diff: [ 0 30  0  0  0  0  0  0],\nloss = 5.096799345333543, calc time: 1.3750808238983154 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1] with loss: 4.4745964936345874\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 30 30 30 30 20],\niats_diff: [ 30   0   0   0   0   0   0 -10],\nloss = 4.4745964936345874, calc time: 1.3444421291351318 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 2],\niats: [30 30 30 30 30 30 30 20  0],\niats_diff: [  0   0   0   0   0   0 -10 -20],\nloss = 12.10388071783724, calc time: 1.3152689933776855 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 20 40 30 30 30 30 30 20],\niats_diff: [ 20  20 -10   0   0   0   0 -10],\nloss = 4.545988096567667, calc time: 1.3673899173736572 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 20 40 30 30 30 30 20],\niats_diff: [ 30 -10  20 -10   0   0   0 -10],\nloss = 4.547847387328862, calc time: 1.3605809211730957 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 20 40 30 30 30 20],\niats_diff: [ 30   0 -10  20 -10   0   0 -10],\nloss = 4.548668481527034, calc time: 1.3588230609893799 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 20 40 30 30 20],\niats_diff: [ 30   0   0 -10  20 -10   0 -10],\nloss = 4.548903228082993, calc time: 1.3599820137023926 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1],\niats: [ 0 30 30 30 30 20 40 30 20],\niats_diff: [ 30   0   0   0 -10  20 -10 -10],\nloss = 4.546974142872423, calc time: 1.3489868640899658 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1],\niats: [ 0 30 30 30 30 30 20 40 20],\niats_diff: [ 30   0   0   0   0 -10  20 -20],\nloss = 4.530063090915193, calc time: 1.3394148349761963 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1] with loss: 4.004634315131955\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 30 30 30 20 30],\niats_diff: [ 30   0   0   0   0   0 -10  10],\nloss = 4.004634315131955, calc time: 1.3443758487701416 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 2],\niats: [30 30 30 30 30 30 20 30  0],\niats_diff: [  0   0   0   0   0 -10  10 -30],\nloss = 11.458257365441597, calc time: 1.3181469440460205 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 20 40 30 30 30 30 20 30],\niats_diff: [ 20  20 -10   0   0   0 -10  10],\nloss = 4.076022862190598, calc time: 1.3917109966278076 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 20 40 30 30 30 20 30],\niats_diff: [ 30 -10  20 -10   0   0 -10  10],\nloss = 4.077884779822379, calc time: 1.345546007156372 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 20 40 30 30 20 30],\niats_diff: [ 30   0 -10  20 -10   0 -10  10],\nloss = 4.0786357473802735, calc time: 1.433948040008545 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 20 40 30 20 30],\niats_diff: [ 30   0   0 -10  20 -10 -10  10],\nloss = 4.078710259341195, calc time: 1.3598768711090088 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1],\niats: [ 0 30 30 30 30 20 40 20 30],\niats_diff: [ 30   0   0   0 -10  20 -20  10],\nloss = 4.073117675727578, calc time: 1.348794937133789 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1] with loss: 3.951522777951733\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 30 30 20 30 30],\niats_diff: [ 30   0   0   0   0 -10  10   0],\nloss = 3.951522777951733, calc time: 1.340014934539795 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 2],\niats: [30 30 30 30 30 20 30 30  0],\niats_diff: [  0   0   0   0 -10  10   0 -30],\nloss = 11.381639862814687, calc time: 1.3276312351226807 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 30 30 20 30 30],\niats_diff: [ 20  20 -10   0   0 -10  10   0],\nloss = 4.022899411414989, calc time: 1.4305121898651123 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 30 30 20 30 30],\niats_diff: [ 30 -10  20 -10   0 -10  10   0],\nloss = 4.024742075228727, calc time: 1.3391878604888916 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 40 30 20 30 30],\niats_diff: [ 30   0 -10  20 -10 -10  10   0],\nloss = 4.025319499664072, calc time: 1.3408939838409424 secs\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 20 40 20 30 30],\niats_diff: [ 30   0   0 -10  20 -20  10   0],\nloss = 4.023289892915583, calc time: 1.3404369354248047 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.943712979930818\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 30 20 30 30 30],\niats_diff: [ 30   0   0   0 -10  10   0   0],\nloss = 3.943712979930818, calc time: 1.3907380104064941 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 30 30 20 30 30 30  0],\niats_diff: [  0   0   0 -10  10   0   0 -30],\nloss = 11.371809881132025, calc time: 1.3345489501953125 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 30 20 30 30 30],\niats_diff: [ 20  20 -10   0 -10  10   0   0],\nloss = 4.015067989056481, calc time: 1.3456339836120605 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 30 20 30 30 30],\niats_diff: [ 30 -10  20 -10 -10  10   0   0],\nloss = 4.01675772032441, calc time: 1.3685638904571533 secs\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 40 20 30 30 30],\niats_diff: [ 30   0 -10  20 -20  10   0   0],\nloss = 4.015286340616477, calc time: 1.355205774307251 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.9428991316139856\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 30 20 30 30 30 30],\niats_diff: [ 30   0   0 -10  10   0   0   0],\nloss = 3.9428991316139856, calc time: 1.5876648426055908 secs\n\nschedule: [0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 30 20 30 30 30 30  0],\niats_diff: [  0   0 -10  10   0   0   0 -30],\nloss = 11.369974159863567, calc time: 1.3349080085754395 secs\n\nschedule: [1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 30 20 30 30 30 30],\niats_diff: [ 20  20 -10 -10  10   0   0   0],\nloss = 4.014050172372439, calc time: 1.327909231185913 secs\n\nschedule: [1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 40 20 30 30 30 30],\niats_diff: [ 30 -10  20 -20  10   0   0   0],\nloss = 4.013594359321584, calc time: 1.3541738986968994 secs\n\n\n#### Found better schedule: [1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.942167480656692\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 30 20 30 30 30 30 30],\niats_diff: [ 30   0 -10  10   0   0   0   0],\nloss = 3.942167480656692, calc time: 1.38081693649292 secs\n\nschedule: [0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 30 20 30 30 30 30 30  0],\niats_diff: [  0 -10  10   0   0   0   0 -30],\nloss = 11.369292174573374, calc time: 1.367281198501587 secs\n\nschedule: [1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 40 20 30 30 30 30 30],\niats_diff: [ 20  20 -20  10   0   0   0   0],\nloss = 4.011100967440671, calc time: 1.427678108215332 secs\n\n\n#### Found better schedule: [1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.941582500781605\n\nGenerated new psm\n\nschedule: [1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 30 20 30 30 30 30 30 30],\niats_diff: [ 30 -10  10   0   0   0   0   0],\nloss = 3.941582500781605, calc time: 1.3475940227508545 secs\n\nschedule: [0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [30 20 30 30 30 30 30 30  0],\niats_diff: [-10  10   0   0   0   0   0 -30],\nloss = 11.366321700189422, calc time: 1.324411153793335 secs\n\n\n#### Found better schedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1] with loss: 3.938692583890992\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3491151332855225 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.323235034942627 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3340709209442139 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3483917713165283 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.4007568359375 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.391611099243164 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3519320487976074 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3855490684509277 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3497340679168701 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3528070449829102 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3484299182891846 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3265342712402344 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3452191352844238 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.343108892440796 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3560009002685547 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3787100315093994 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3532230854034424 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3414900302886963 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3563997745513916 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3376808166503906 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.377932071685791 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3217082023620605 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.334190845489502 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.334920883178711 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3492960929870605 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.357316255569458 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3770091533660889 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3570821285247803 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3625133037567139 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3643419742584229 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3596110343933105 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3350589275360107 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.328052043914795 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3546648025512695 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3511500358581543 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3457260131835938 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.347372055053711 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.440716028213501 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.36967134475708 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3893909454345703 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.367203712463379 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3266048431396484 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3505878448486328 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3535170555114746 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3525371551513672 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3483901023864746 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3414227962493896 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.341402292251587 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3905410766601562 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3557250499725342 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.35943603515625 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.356956958770752 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.361133098602295 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.349431037902832 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.352813959121704 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.352647304534912 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3535161018371582 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3380777835845947 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3659658432006836 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3839080333709717 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3686048984527588 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.330293893814087 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3422021865844727 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3503069877624512 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3565089702606201 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3772411346435547 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.380298137664795 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3688251972198486 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3893320560455322 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3352429866790771 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.4494438171386719 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3395230770111084 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3558542728424072 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3799159526824951 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3443639278411865 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3461909294128418 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.355273962020874 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3475720882415771 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.352618932723999 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3561651706695557 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3652973175048828 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3786559104919434 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.338273048400879 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3630030155181885 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3770020008087158 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3474020957946777 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3531599044799805 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.343445062637329 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3328487873077393 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3542671203613281 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3513381481170654 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3181841373443604 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.4017751216888428 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3425729274749756 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3758299350738525 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3774521350860596 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3695409297943115 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3336889743804932 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3504798412322998 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3453729152679443 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3652300834655762 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.330744981765747 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3457598686218262 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.4284961223602295 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3548851013183594 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.351511001586914 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3624329566955566 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.340315818786621 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3841350078582764 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.429574966430664 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3728771209716797 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3566479682922363 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3640289306640625 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.365102767944336 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3849716186523438 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3673608303070068 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3672900199890137 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.4087071418762207 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3581750392913818 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3518269062042236 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3696842193603516 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3407187461853027 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.4270191192626953 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.5452489852905273 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.4291551113128662 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.4822149276733398 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3750598430633545 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3608927726745605 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3868091106414795 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3724768161773682 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3731141090393066 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3483099937438965 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3493456840515137 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3680260181427002 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.337048053741455 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.4450750350952148 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.4471089839935303 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.4619228839874268 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3740320205688477 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3593831062316895 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3629200458526611 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3195970058441162 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3371338844299316 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3343448638916016 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3563220500946045 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3599019050598145 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3626091480255127 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.4078130722045898 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3590619564056396 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.3789260387420654 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3632678985595703 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3424830436706543 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.4285078048706055 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3609442710876465 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.357457160949707 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3671531677246094 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3657019138336182 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3643851280212402 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3978159427642822 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.369197130203247 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3762249946594238 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3654160499572754 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.372028112411499 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3671932220458984 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3618719577789307 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3614568710327148 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.3648991584777832 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3707647323608398 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3847708702087402 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.4348108768463135 secs\n\nGenerated new psm\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3915610313415527 secs\n\nschedule: [0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 2],\niats: [20 30 30 30 30 30 30 30  0],\niats_diff: [ 10   0   0   0   0   0   0 -30],\nloss = 11.27975183365201, calc time: 1.3919730186462402 secs\n\nschedule: [1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 10 40 30 30 30 30 30 30],\niats_diff: [ 10  30 -10   0   0   0   0   0],\nloss = 4.272760428930516, calc time: 1.3919799327850342 secs\n\nschedule: [1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 20 40 30 30 30 30 30],\niats_diff: [ 20   0  20 -10   0   0   0   0],\nloss = 4.044612588968373, calc time: 1.3801758289337158 secs\n\nschedule: [1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 20 40 30 30 30 30],\niats_diff: [ 20  10 -10  20 -10   0   0   0],\nloss = 4.0165205356173725, calc time: 1.3803930282592773 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 20 40 30 30 30],\niats_diff: [ 20  10   0 -10  20 -10   0   0],\nloss = 4.013699090515023, calc time: 1.3708610534667969 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 20 40 30 30],\niats_diff: [ 20  10   0   0 -10  20 -10   0],\nloss = 4.012697434551131, calc time: 1.378281831741333 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 20 40 30],\niats_diff: [ 20  10   0   0   0 -10  20 -10],\nloss = 4.010324755948324, calc time: 1.3791499137878418 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1],\niats: [ 0 20 30 30 30 30 30 20 40],\niats_diff: [ 20  10   0   0   0   0 -10  20],\nloss = 3.9816394588973623, calc time: 1.3677191734313965 secs\n\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0],\niats: [ 0 20 30 30 30 30 30 30 20],\niats_diff: [ 20  10   0   0   0   0   0 -10],\nloss = 4.561139861804686, calc time: 1.427121877670288 secs\n\nFinished iterating in: 305 seconds\n\nBest result:\nschedule: [1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1],\niats: [ 0 20 30 30 30 30 30 30 30],\niats_diff: [20 10  0  0  0  0  0  0],\nloss = 3.938692583890992, calc time: 1.3541150093078613 secs"
  }
]