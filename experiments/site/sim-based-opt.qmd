---
title: "Simulation Based Optimization"
---

## Setup

See "Scheduling Simulation" for all function descriptions.

```{python}
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import time
import functions as fn
```

Configure global simulation parameters.

```{python}
## Global variables

cts = np.array([0, 1]) # client types -> normal or emergency
pct = np.array([1, 0]) # distribution of client types -> normal or emergency
# sts = np.array([14, 14, 14, 15, 16]) # service times - for simple numerical testing
# sts = np.random.poisson(lam=14, size=1000) - using poisson distribution

ns = 0.1 # percentage of no-shows
nsims = 100000 # number of simulations
logs = False # do not print simulation logs
lnm = 14 # lognormal mean
lns = 5 # lognormal standard deviation
nm = fn.logn_mean_lns(lnm, lns)[0] # normal mean
ns = fn.logn_mean_lns(lnm, lns)[1] # normal standard deviation
d = 15 # interval time
sts = fn.generate_logn_sts(1, 10000, lnm, lns)[0] # sampling population for array service

```

## Run simulations

```{python}

# Simulation 1

tic = time.time()
sim = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule
iats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times
iats_d = np.diff(iats)
N = len(iats) # number of patients
# T = len(sim) # number of intervals
ctsm = np.random.choice(cts, size = (nsims * N), p=pct).reshape((nsims, N)) # client types matrix
stsm = np.random.lognormal(mean = nm, sigma=ns, size=(nsims * N)).reshape(nsims, N) # service times matrix
nsm = np.random.binomial(n=1, p=1-ns, size = (nsims * N)).reshape(nsims, N) # no-shows matrix
stsm = stsm * nsm # service times matrix with no-shows
simreswt = []
simresln = 0

for i in range(nsims):
  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)
  simreswt.append(experiment[0].mean())
  ln = max(0, (experiment[1] - d))
  simresln += ln
  
mwt = np.array(simreswt).mean()
mln = simresln / nsims
loss = loss = 0.5 * mwt + 0.5 * mln
toc = time.time()
print(toc - tic)
# plots

fig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)
axs1.plot(iats, label="iats")
axs1.set_title(f'iats: {iats}')
axs2.plot(iats_d, label="iats_d")
axs2.set_title(f'iats_d: {iats_d}')
fig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)
axs3.hist(simreswt, bins = 300)
axs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')
```

```{python}
# Simulation 2

sim = np.array([2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) # initial schedule
iats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times
iats_d = np.diff(iats)
simreswt = []
simresln = 0


for i in range(nsims):
  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)
  simreswt.append(experiment[0].mean())
  ln = max(0, (experiment[1] - d))
  simresln += ln
  

mwt = np.array(simreswt).mean()
mln = simresln / nsims
loss = 0.5 * mwt + 0.5 * mln

# plot histogram of waiting times

fig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)
axs1.plot(iats, label="iats")
axs1.set_title(f'iats: {iats}')
axs2.plot(iats_d, label="iats_d")
axs2.set_title(f'iats_d: {iats_d}')
fig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)
axs3.hist(simreswt, bins = 300)
axs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')

```

```{python}
# Simulation 3

sim = np.array([1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1]) # initial schedule
iats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times
iats_d = np.diff(iats)
simreswt = []
simresln = 0


for i in range(nsims):
  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)
  simreswt.append(experiment[0].mean())
  ln = max(0, (experiment[1] - d))
  simresln += ln
  

mwt = np.array(simreswt).mean()
mln = simresln / nsims
loss = 0.5 * mwt + 0.5 * mln

# plot histogram of waiting times

fig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)
axs1.plot(iats, label="iats")
axs1.set_title(f'iats: {iats}')
axs2.plot(iats_d, label="iats_d")
axs2.set_title(f'iats_d: {iats_d}')
fig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)
axs3.hist(simreswt, bins = 300)
axs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')
```

```{python}
# Simulation 4

sim = np.array([1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1]) # initial schedule
iats = fn.transform_schedule_iats(sim, d) # initial inter-arrival times
iats_d = np.diff(iats)
simreswt = []
simresln = 0


for i in range(nsims):
  experiment = fn.simulate_crn(iats, ctsm[i], stsm[i], logs=logs)
  simreswt.append(experiment[0].mean())
  ln = max(0, (experiment[1] - d))
  simresln += ln
  

mwt = np.array(simreswt).mean()
mln = simresln / nsims
loss = 0.5 * mwt + 0.5 * mln

# plots

fig1, (axs1, axs2) = plt.subplots(2, sharey=True, tight_layout=True)
axs1.plot(iats, label="iats")
axs1.set_title(f'iats: {iats}')
axs2.plot(iats_d, label="iats_d")
axs2.set_title(f'iats_d: {iats_d}')
fig2, axs3 = plt.subplots(1, sharey=True, tight_layout=True)
axs3.hist(simreswt, bins = 300)
axs3.set_title(f'schedule: {sim}, mwt: {mwt}, mln: {mln}, loss: {loss}')
```
